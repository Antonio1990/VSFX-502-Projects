<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Built-In Commands - package manual page</title>
</head>
<body>
<table width='100%' border='0' cellspacing='0' cellpadding='0'
bgcolor='EAE2BB'>
<tr>
<td><a target='_blank' href=
'http://www.ActiveState.com/Products/ActiveTcl'><img src=
'../../images/ActiveTcl.gif' border='0' align='left' height='61'
width='64'></a> </td>
<td>
<div align='center' class='heading'>ActiveTcl User Guide</div>
</td>
<td><a target='_blank' href='http://www.ActiveState.com'><img src=
'../../images/AS_logo.gif' border='0' align='right' height='48'
width='112'></a> </td>
</tr>

<tr>
<td class='lineColour' colspan='3'></td>
</tr>
</table>

<br>
<dl>
<dd><a href="package.htm#M2" name="L883">NAME</a> 

<dl>
<dd>package - Facilities for package loading and version
control</dd>
</dl>
</dd>

<dd><a href="package.htm#M3" name="L884">SYNOPSIS</a> 

<dl>
<dd><b>package forget ?</b><i>package package ...</i>?</dd>

<dd><b>package ifneeded</b> <i>package version</i>
?<i>script</i>?</dd>

<dd><b>package names</b></dd>

<dd><b>package present</b> ?<b>-exact</b>? <i>package</i>
?<i>version</i>?</dd>

<dd><b>package provide</b> <i>package</i> ?<i>version</i>?</dd>

<dd><b>package require</b> ?<b>-exact</b>? <i>package</i>
?<i>version</i>?</dd>

<dd><b>package unknown</b> ?<i>command</i>?</dd>

<dd><b>package vcompare</b> <i>version1 version2</i></dd>

<dd><b>package versions</b> <i>package</i></dd>

<dd><b>package vsatisfies</b> <i>version1 version2</i></dd>
</dl>
</dd>

<dd><a href="package.htm#M4" name="L885">DESCRIPTION</a> 

<dl>
<dd><a href="package.htm#M5" name="L886"><b>package forget
?</b><i>package package ...</i>?</a></dd>

<dd><a href="package.htm#M6" name="L887"><b>package ifneeded</b>
<i>package version</i> ?<i>script</i>?</a></dd>

<dd><a href="package.htm#M7" name="L888"><b>package
names</b></a></dd>

<dd><a href="package.htm#M8" name="L889"><b>package present</b>
?<b>-exact</b>? <i>package</i> ?<i>version</i>?</a></dd>

<dd><a href="package.htm#M9" name="L890"><b>package provide</b>
<i>package</i> ?<i>version</i>?</a></dd>

<dd><a href="package.htm#M10" name="L891"><b>package require</b>
?<b>-exact</b>? <i>package</i> ?<i>version</i>?</a></dd>

<dd><a href="package.htm#M11" name="L892"><b>package unknown</b>
?<i>command</i>?</a></dd>

<dd><a href="package.htm#M12" name="L893"><b>package vcompare</b>
<i>version1 version2</i></a></dd>

<dd><a href="package.htm#M13" name="L894"><b>package versions</b>
<i>package</i></a></dd>

<dd><a href="package.htm#M14" name="L895"><b>package vsatisfies</b>
<i>version1 version2</i></a></dd>
</dl>
</dd>

<dd><a href="package.htm#M15" name="L896">VERSION NUMBERS</a></dd>

<dd><a href="package.htm#M16" name="L897">PACKAGE INDICES</a></dd>

<dd><a href="package.htm#M17" name="L898">SEE ALSO</a></dd>

<dd><a href="package.htm#M18" name="L899">KEYWORDS</a></dd>
</dl>

<hr>
<h3><a name="M2">NAME</a></h3>

<p>package - Facilities for package loading and version control</p>

<h3><a name="M3">SYNOPSIS</a></h3>

<p><b>package forget ?</b><i>package package ...</i>?<br>
<b>package ifneeded</b> <i>package version</i> ?<i>script</i>?<br>
<b>package names</b><br>
<b>package present</b> ?<b>-exact</b>? <i>package</i>
?<i>version</i>?<br>
<b>package provide</b> <i>package</i> ?<i>version</i>?<br>
<b>package require</b> ?<b>-exact</b>? <i>package</i>
?<i>version</i>?<br>
<b>package unknown</b> ?<i>command</i>?<br>
<b>package vcompare</b> <i>version1 version2</i><br>
<b>package versions</b> <i>package</i><br>
<b>package vsatisfies</b> <i>version1 version2</i><br>
</p>

<h3><a name="M4">DESCRIPTION</a></h3>

<p>This command keeps a simple database of the packages available
for use by the current interpreter and how to load them into the
interpreter. It supports multiple versions of each package and
arranges for the correct version of a package to be loaded based on
what is needed by the application. This command also detects and
reports version clashes. Typically, only the <b>package require</b>
and <b>package provide</b> commands are invoked in normal Tcl
scripts; the other commands are used primarily by system scripts
that maintain the package database.</p>

<p>The behavior of the <b>package</b> command is determined by its
first argument. The following forms are permitted:</p>

<dl>
<dt><a name="M5"><b>package forget ?</b><i>package package
...</i>?</a></dt>

<dd>Removes all information about each specified package from this
interpreter, including information provided by both <b>package
ifneeded</b> and <b>package provide</b>.</dd>

<dt><a name="M6"><b>package ifneeded</b> <i>package version</i>
?<i>script</i>?</a></dt>

<dd>This command typically appears only in system configuration
scripts to set up the package database. It indicates that a
particular version of a particular package is available if needed,
and that the package can be added to the interpreter by executing
<i>script</i>. The script is saved in a database for use by
subsequent <b>package require</b> commands; typically,
<i>script</i> sets up auto-loading for the commands in the package
(or calls <b><a href="../TclCmd/load.htm">load</a></b> and/or <b><a
href="../TclCmd/source.htm">source</a></b> directly), then invokes
<b>package provide</b> to indicate that the package is present.
There may be information in the database for several different
versions of a single package. If the database already contains
information for <i>package</i> and <i>version</i>, the new
<i>script</i> replaces the existing one. If the <i>script</i>
argument is omitted, the current script for version <i>version</i>
of package <i>package</i> is returned, or an empty string if no
<b>package ifneeded</b> command has been invoked for this
<i>package</i> and <i>version</i>.</dd>

<dt><a name="M7"><b>package names</b></a></dt>

<dd>Returns a list of the names of all packages in the interpreter
for which a version has been provided (via <b>package provide</b>)
or for which a <b>package ifneeded</b> script is available. The
order of elements in the list is arbitrary.</dd>

<dt><a name="M8"><b>package present</b> ?<b>-exact</b>?
<i>package</i> ?<i>version</i>?</a></dt>

<dd>This command is equivalent to <b>package require</b> except
that it does not try and load the package if it is not already
loaded.</dd>

<dt><a name="M9"><b>package provide</b> <i>package</i>
?<i>version</i>?</a></dt>

<dd>This command is invoked to indicate that version <i>version</i>
of package <i>package</i> is now present in the interpreter. It is
typically invoked once as part of an <b>ifneeded</b> script, and
again by the package itself when it is finally loaded. An error
occurs if a different version of <i>package</i> has been provided
by a previous <b>package provide</b> command. If the <i>version</i>
argument is omitted, then the command returns the version number
that is currently provided, or an empty string if no <b>package
provide</b> command has been invoked for <i>package</i> in this
interpreter.</dd>

<dt><a name="M10"><b>package require</b> ?<b>-exact</b>?
<i>package</i> ?<i>version</i>?</a></dt>

<dd>This command is typically invoked by Tcl code that wishes to
use a particular version of a particular package. The arguments
indicate which package is wanted, and the command ensures that a
suitable version of the package is loaded into the interpreter. If
the command succeeds, it returns the version number that is loaded;
otherwise it generates an error. If both the <b>-exact</b> switch
and the <i>version</i> argument are specified then only the given
version is acceptable. If <b>-exact</b> is omitted but
<i>version</i> is specified, then versions later than
<i>version</i> are also acceptable as long as they have the same
major version number as <i>version</i>. If both <b>-exact</b> and
<i>version</i> are omitted then any version whatsoever is
acceptable. If a version of <i>package</i> has already been
provided (by invoking the <b>package provide</b> command), then its
version number must satisfy the criteria given by <b>-exact</b> and
<i>version</i> and the command returns immediately. Otherwise, the
command searches the database of information provided by previous
<b>package ifneeded</b> commands to see if an acceptable version of
the package is available. If so, the script for the highest
acceptable version number is evaluated in the global namespace; it
must do whatever is necessary to load the package, including
calling <b>package provide</b> for the package. If the <b>package
ifneeded</b> database does not contain an acceptable version of the
package and a <b>package unknown</b> command has been specified for
the interpreter then that command is evaluated in the global
namespace; when it completes, Tcl checks again to see if the
package is now provided or if there is a <b>package ifneeded</b>
script for it. If all of these steps fail to provide an acceptable
version of the package, then the command returns an error.</dd>

<dt><a name="M11"><b>package unknown</b> ?<i>command</i>?</a></dt>

<dd>This command supplies a ``last resort'' command to invoke
during <b>package require</b> if no suitable version of a package
can be found in the <b>package ifneeded</b> database. If the
<i>command</i> argument is supplied, it contains the first part of
a command; when the command is invoked during a <b>package
require</b> command, Tcl appends two additional arguments giving
the desired package name and version. For example, if
<i>command</i> is <b>foo bar</b> and later the command <b>package
require test 2.4</b> is invoked, then Tcl will execute the command
<b>foo bar test 2.4</b> to load the package. If no version number
is supplied to the <b>package require</b> command, then the version
argument for the invoked command will be an empty string. If the
<b>package unknown</b> command is invoked without a <i>command</i>
argument, then the current <b>package unknown</b> script is
returned, or an empty string if there is none. If <i>command</i> is
specified as an empty string, then the current <b>package
unknown</b> script is removed, if there is one.</dd>

<dt><a name="M12"><b>package vcompare</b> <i>version1
version2</i></a></dt>

<dd>Compares the two version numbers given by <i>version1</i> and
<i>version2</i>. Returns -1 if <i>version1</i> is an earlier
version than <i>version2</i>, 0 if they are equal, and 1 if
<i>version1</i> is later than <b>version2</b>.</dd>

<dt><a name="M13"><b>package versions</b> <i>package</i></a></dt>

<dd>Returns a list of all the version numbers of <i>package</i> for
which information has been provided by <b>package ifneeded</b>
commands.</dd>

<dt><a name="M14"><b>package vsatisfies</b> <i>version1
version2</i></a></dt>

<dd>Returns 1 if scripts written for <i>version2</i> will work
unchanged with <i>version1</i> (i.e. <i>version1</i> is equal to or
greater than <i>version2</i> and they both have the same major
version number), 0 otherwise.</dd>
</dl>

<h3><a name="M15">VERSION NUMBERS</a></h3>

<p>Version numbers consist of one or more decimal numbers separated
by dots, such as 2 or 1.162 or 3.1.13.1. The first number is called
the major version number. Larger numbers correspond to later
versions of a package, with leftmost numbers having greater
significance. For example, version 2.1 is later than 1.3 and
version 3.4.6 is later than 3.3.5. Missing fields are equivalent to
zeroes: version 1.3 is the same as version 1.3.0 and 1.3.0.0, so it
is earlier than 1.3.1 or 1.3.0.2. A later version number is assumed
to be upwards compatible with an earlier version number as long as
both versions have the same major version number. For example, Tcl
scripts written for version 2.3 of a package should work unchanged
under versions 2.3.2, 2.4, and 2.5.1. Changes in the major version
number signify incompatible changes: if code is written to use
version 2.1 of a package, it is not guaranteed to work unmodified
with either version 1.7.3 or version 3.1.</p>

<h3><a name="M16">PACKAGE INDICES</a></h3>

<p>The recommended way to use packages in Tcl is to invoke
<b>package require</b> and <b>package provide</b> commands in
scripts, and use the procedure <b>pkg_mkIndex</b> to create package
index files. Once you've done this, packages will be loaded
automatically in response to <b>package require</b> commands. See
the documentation for <b>pkg_mkIndex</b> for details.</p>

<h3><a name="M17">SEE ALSO</a></h3>

<p><b><a href="../TclCmd/msgcat.htm">msgcat</a></b>,
<b>packagens</b>, <b>pkgMkIndex</b></p>

<h3><a name="M18">KEYWORDS</a></h3>

<p><a href="../Keywords/P.htm#package">package</a>, <a href=
"../Keywords/V.htm#version">version</a></p>

<hr>
<pre>
<a href=
"../copyright.htm">Copyright</a> &copy; 1996 Sun Microsystems, Inc.
<a href=
"../copyright.htm">Copyright</a> &copy; 1995-1997 Roger E. Critchlow Jr.
</pre>
</body>
</html>

