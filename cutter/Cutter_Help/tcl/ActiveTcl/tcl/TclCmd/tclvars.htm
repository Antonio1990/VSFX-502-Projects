<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Built-In Commands - tclvars manual page</title>
</head>
<body>
<table width='100%' border='0' cellspacing='0' cellpadding='0'
bgcolor='EAE2BB'>
<tr>
<td><a target='_blank' href=
'http://www.ActiveState.com/Products/ActiveTcl'><img src=
'../../images/ActiveTcl.gif' border='0' align='left' height='61'
width='64'></a> </td>
<td>
<div align='center' class='heading'>ActiveTcl User Guide</div>
</td>
<td><a target='_blank' href='http://www.ActiveState.com'><img src=
'../../images/AS_logo.gif' border='0' align='right' height='48'
width='112'></a> </td>
</tr>

<tr>
<td class='lineColour' colspan='3'></td>
</tr>
</table>

<br>
<dl>
<dd><a href="tclvars.htm#M2" name="L1391">NAME</a> 

<dl>
<dd>tclvars - Variables used by Tcl</dd>
</dl>
</dd>

<dd><a href="tclvars.htm#M3" name="L1392">DESCRIPTION</a> 

<dl>
<dd><a href="tclvars.htm#M4" name="L1393"><b>env</b></a> 

<dl>
<dd><a href="tclvars.htm#M5" name="L1394"><b>LOGIN</b></a></dd>

<dd><a href="tclvars.htm#M6" name="L1395"><b>USER</b></a></dd>

<dd><a href="tclvars.htm#M7" name=
"L1396"><b>SYS_FOLDER</b></a></dd>

<dd><a href="tclvars.htm#M8" name=
"L1397"><b>APPLE_M_FOLDER</b></a></dd>

<dd><a href="tclvars.htm#M9" name="L1398"><b>CP_FOLDER</b></a></dd>

<dd><a href="tclvars.htm#M10" name=
"L1399"><b>DESK_FOLDER</b></a></dd>

<dd><a href="tclvars.htm#M11" name=
"L1400"><b>EXT_FOLDER</b></a></dd>

<dd><a href="tclvars.htm#M12" name=
"L1401"><b>PREF_FOLDER</b></a></dd>

<dd><a href="tclvars.htm#M13" name=
"L1402"><b>PRINT_MON_FOLDER</b></a></dd>

<dd><a href="tclvars.htm#M14" name=
"L1403"><b>SHARED_TRASH_FOLDER</b></a></dd>

<dd><a href="tclvars.htm#M15" name=
"L1404"><b>TRASH_FOLDER</b></a></dd>

<dd><a href="tclvars.htm#M16" name=
"L1405"><b>START_UP_FOLDER</b></a></dd>

<dd><a href="tclvars.htm#M17" name="L1406"><b>HOME</b></a></dd>
</dl>
</dd>

<dd><a href="tclvars.htm#M18" name="L1407"><b>errorCode</b></a> 

<dl>
<dd><a href="tclvars.htm#M19" name="L1408"><b>ARITH</b> <i>code
msg</i></a></dd>

<dd><a href="tclvars.htm#M20" name="L1409"><b>CHILDKILLED</b>
<i>pid sigName msg</i></a></dd>

<dd><a href="tclvars.htm#M21" name="L1410"><b>CHILDSTATUS</b>
<i>pid code</i></a></dd>

<dd><a href="tclvars.htm#M22" name="L1411"><b>CHILDSUSP</b> <i>pid
sigName msg</i></a></dd>

<dd><a href="tclvars.htm#M23" name="L1412"><b>NONE</b></a></dd>

<dd><a href="tclvars.htm#M24" name="L1413"><b>POSIX</b> <i>errName
msg</i></a></dd>
</dl>
</dd>

<dd><a href="tclvars.htm#M25" name=
"L1414"><b>errorInfo</b></a></dd>

<dd><a href="tclvars.htm#M26" name=
"L1415"><b>tcl_library</b></a></dd>

<dd><a href="tclvars.htm#M27" name=
"L1416"><b>tcl_patchLevel</b></a></dd>

<dd><a href="tclvars.htm#M28" name=
"L1417"><b>tcl_pkgPath</b></a></dd>

<dd><a href="tclvars.htm#M29" name="L1418"><b>tcl_platform</b></a> 

<dl>
<dd><a href="tclvars.htm#M30" name=
"L1419"><b>byteOrder</b></a></dd>

<dd><a href="tclvars.htm#M31" name="L1420"><b>debug</b></a></dd>

<dd><a href="tclvars.htm#M32" name="L1421"><b>machine</b></a></dd>

<dd><a href="tclvars.htm#M33" name="L1422"><b>os</b></a></dd>

<dd><a href="tclvars.htm#M34" name=
"L1423"><b>osVersion</b></a></dd>

<dd><a href="tclvars.htm#M35" name="L1424"><b>platform</b></a></dd>

<dd><a href="tclvars.htm#M36" name="L1425"><b>threaded</b></a></dd>

<dd><a href="tclvars.htm#M37" name="L1426"><b>user</b></a></dd>

<dd><a href="tclvars.htm#M38" name="L1427"><b>wordSize</b></a></dd>
</dl>
</dd>

<dd><a href="tclvars.htm#M39" name=
"L1428"><b>tcl_precision</b></a></dd>

<dd><a href="tclvars.htm#M40" name=
"L1429"><b>tcl_rcFileName</b></a></dd>

<dd><a href="tclvars.htm#M41" name=
"L1430"><b>tcl_rcRsrcName</b></a></dd>

<dd><a href="tclvars.htm#M42" name=
"L1431"><b>tcl_traceCompile</b></a></dd>

<dd><a href="tclvars.htm#M43" name=
"L1432"><b>tcl_traceExec</b></a></dd>

<dd><a href="tclvars.htm#M44" name=
"L1433"><b>tcl_wordchars</b></a></dd>

<dd><a href="tclvars.htm#M45" name=
"L1434"><b>tcl_nonwordchars</b></a></dd>

<dd><a href="tclvars.htm#M46" name=
"L1435"><b>tcl_version</b></a></dd>
</dl>
</dd>

<dd><a href="tclvars.htm#M47" name="L1436">SEE ALSO</a></dd>

<dd><a href="tclvars.htm#M48" name="L1437">KEYWORDS</a></dd>
</dl>

<hr>
<h3><a name="M2">NAME</a></h3>

<p>tclvars - Variables used by Tcl</p>

<h3><a name="M3">DESCRIPTION</a></h3>

<p>The following global variables are created and managed
automatically by the Tcl library. Except where noted below, these
variables should normally be treated as read-only by
application-specific code and by users.</p>

<dl>
<dt><a name="M4"><b>env</b></a></dt>

<dd>This variable is maintained by Tcl as an array whose elements
are the environment variables for the process. Reading an element
will return the value of the corresponding environment variable.
Setting an element of the array will modify the corresponding
environment variable or create a new one if it doesn't already
exist. Unsetting an element of <b>env</b> will remove the
corresponding environment variable. Changes to the <b>env</b> array
will affect the environment passed to children by commands like
<b><a href="../TclCmd/exec.htm">exec</a></b>. If the entire
<b>env</b> array is unset then Tcl will stop monitoring <b>env</b>
accesses and will not update environment variables. 

<dl>
<dd>Under Windows, the environment variables PATH and COMSPEC in
any capitalization are converted automatically to upper case. For
instance, the PATH variable could be exported by the operating
system as ``path'', ``Path'', ``PaTh'', etc., causing otherwise
simple Tcl code to have to support many special cases. All other
environment variables inherited by Tcl are left unmodified. Setting
an env array variable to blank is the same as unsetting it as this
is the behavior of the underlying Windows OS. It should be noted
that relying on an existing and empty environment variable won't
work on windows and is discouraged for cross-platform usage.</dd>
</dl>

<dl>
<dd>On the Macintosh, the environment variable is constructed by
Tcl as no global environment variable exists. The environment
variables that are created for Tcl include: 

<dl>
<dt><a name="M5"><b>LOGIN</b></a></dt>

<dd>This holds the Chooser name of the Macintosh.</dd>

<dt><a name="M6"><b>USER</b></a></dt>

<dd>This also holds the Chooser name of the Macintosh.</dd>

<dt><a name="M7"><b>SYS_FOLDER</b></a></dt>

<dd>The path to the system directory.</dd>

<dt><a name="M8"><b>APPLE_M_FOLDER</b></a></dt>

<dd>The path to the Apple Menu directory.</dd>

<dt><a name="M9"><b>CP_FOLDER</b></a></dt>

<dd>The path to the control panels directory.</dd>

<dt><a name="M10"><b>DESK_FOLDER</b></a></dt>

<dd>The path to the desk top directory.</dd>

<dt><a name="M11"><b>EXT_FOLDER</b></a></dt>

<dd>The path to the system extensions directory.</dd>

<dt><a name="M12"><b>PREF_FOLDER</b></a></dt>

<dd>The path to the preferences directory.</dd>

<dt><a name="M13"><b>PRINT_MON_FOLDER</b></a></dt>

<dd>The path to the print monitor directory.</dd>

<dt><a name="M14"><b>SHARED_TRASH_FOLDER</b></a></dt>

<dd>The path to the network trash directory.</dd>

<dt><a name="M15"><b>TRASH_FOLDER</b></a></dt>

<dd>The path to the trash directory.</dd>

<dt><a name="M16"><b>START_UP_FOLDER</b></a></dt>

<dd>The path to the start up directory.</dd>

<dt><a name="M17"><b>HOME</b></a></dt>

<dd>The path to the application's default directory.</dd>
</dl>

<p>You can also create your own environment variables for the
Macintosh. A file named <i>Tcl Environment Variables</i> may be
placed in the preferences folder in the Mac system folder. Each
line of this file should be of the form
<i>VAR_NAME=var_data</i>.</p>

<p>The last alternative is to place environment variables in a
'STR#' resource named <i>Tcl Environment Variables</i> of the
application. This is considered a little more ``Mac like'' than a
Unix style Environment Variable file. Each entry in the 'STR#'
resource has the same format as above. The source code file
<i>tclMacEnv.c</i> contains the implementation of the env
mechanisms. This file contains many #define's that allow
customization of the env mechanisms to fit your applications
needs.</p>
</dd>
</dl>
</dd>

<dt><a name="M18"><b>errorCode</b></a></dt>

<dd>After an error has occurred, this variable will be set to hold
additional information about the error in a form that is easy to
process with programs. <b>errorCode</b> consists of a Tcl list with
one or more elements. The first element of the list identifies a
general class of errors, and determines the format of the rest of
the list. The following formats for <b>errorCode</b> are used by
the Tcl core; individual applications may define additional
formats. 

<dl>
<dt><a name="M19"><b>ARITH</b> <i>code msg</i></a></dt>

<dd>This format is used when an arithmetic error occurs (e.g. an
attempt to divide by zero in the <b><a href=
"../TclCmd/expr.htm">expr</a></b> command). <i>Code</i> identifies
the precise error and <i>msg</i> provides a human-readable
description of the error. <i>Code</i> will be either DIVZERO (for
an attempt to divide by zero), DOMAIN (if an argument is outside
the domain of a function, such as acos(-3)), IOVERFLOW (for integer
overflow), OVERFLOW (for a floating-point overflow), or UNKNOWN (if
the cause of the error cannot be determined).</dd>

<dt><a name="M20"><b>CHILDKILLED</b> <i>pid sigName
msg</i></a></dt>

<dd>This format is used when a child process has been killed
because of a signal. The second element of <b>errorCode</b> will be
the process's identifier (in decimal). The third element will be
the symbolic name of the signal that caused the process to
terminate; it will be one of the names from the include file
signal.h, such as <b>SIGPIPE</b>. The fourth element will be a
short human-readable message describing the signal, such as ``write
on pipe with no readers'' for <b>SIGPIPE</b>.</dd>

<dt><a name="M21"><b>CHILDSTATUS</b> <i>pid code</i></a></dt>

<dd>This format is used when a child process has exited with a
non-zero exit status. The second element of <b>errorCode</b> will
be the process's identifier (in decimal) and the third element will
be the exit code returned by the process (also in decimal).</dd>

<dt><a name="M22"><b>CHILDSUSP</b> <i>pid sigName msg</i></a></dt>

<dd>This format is used when a child process has been suspended
because of a signal. The second element of <b>errorCode</b> will be
the process's identifier, in decimal. The third element will be the
symbolic name of the signal that caused the process to suspend;
this will be one of the names from the include file signal.h, such
as <b>SIGTTIN</b>. The fourth element will be a short
human-readable message describing the signal, such as ``background
tty read'' for <b>SIGTTIN</b>.</dd>

<dt><a name="M23"><b>NONE</b></a></dt>

<dd>This format is used for errors where no additional information
is available for an error besides the message returned with the
error. In these cases <b>errorCode</b> will consist of a list
containing a single element whose contents are <b>NONE</b>.</dd>

<dt><a name="M24"><b>POSIX</b> <i>errName msg</i></a></dt>

<dd>If the first element of <b>errorCode</b> is <b>POSIX</b>, then
the error occurred during a POSIX kernel call. The second element
of the list will contain the symbolic name of the error that
occurred, such as <b>ENOENT</b>; this will be one of the values
defined in the include file errno.h. The third element of the list
will be a human-readable message corresponding to <i>errName</i>,
such as ``no such file or directory'' for the <b>ENOENT</b>
case.</dd>
</dl>

<p>To set <b>errorCode</b>, applications should use library
procedures such as <b><a href=
"../TclLib/AddErrInfo.htm">Tcl_SetErrorCode</a></b> and <b><a href=
"../TclLib/AddErrInfo.htm">Tcl_PosixError</a></b>, or they may
invoke the <b><a href="../TclCmd/error.htm">error</a></b> command.
If one of these methods hasn't been used, then the Tcl interpreter
will reset the variable to <b>NONE</b> after the next error.</p>
</dd>

<dt><a name="M25"><b>errorInfo</b></a></dt>

<dd>After an error has occurred, this string will contain one or
more lines identifying the Tcl commands and procedures that were
being executed when the most recent error occurred. Its contents
take the form of a stack trace showing the various nested Tcl
commands that had been invoked at the time of the error.</dd>

<dt><a name="M26"><b>tcl_library</b></a></dt>

<dd>This variable holds the name of a directory containing the
system library of Tcl scripts, such as those used for auto-loading.
The value of this variable is returned by the <b><a href=
"../TclCmd/info.htm">info library</a></b> command. See the
<b>library</b> manual entry for details of the facilities provided
by the Tcl script library. Normally each application or package
will have its own application-specific script library in addition
to the Tcl script library; each application should set a global
variable with a name like <b>$</b><i>app</i><b>_library</b> (where
<i>app</i> is the application's name) to hold the network file name
for that application's library directory. The initial value of
<b>tcl_library</b> is set when an interpreter is created by
searching several different directories until one is found that
contains an appropriate Tcl startup script. If the
<b>TCL_LIBRARY</b> environment variable exists, then the directory
it names is checked first. If <b>TCL_LIBRARY</b> isn't set or
doesn't refer to an appropriate directory, then Tcl checks several
other directories based on a compiled-in default location, the
location of the binary containing the application, and the current
working directory.</dd>

<dt><a name="M27"><b>tcl_patchLevel</b></a></dt>

<dd>When an interpreter is created Tcl initializes this variable to
hold a string giving the current patch level for Tcl, such as
<b>7.3p2</b> for Tcl 7.3 with the first two official patches, or
<b>7.4b4</b> for the fourth beta release of Tcl 7.4. The value of
this variable is returned by the <b><a href=
"../TclCmd/info.htm">info patchlevel</a></b> command.</dd>

<dt><a name="M28"><b>tcl_pkgPath</b></a></dt>

<dd>This variable holds a list of directories indicating where
packages are normally installed. It is not used on Windows. It
typically contains either one or two entries; if it contains two
entries, the first is normally a directory for platform-dependent
packages (e.g., shared library binaries) and the second is normally
a directory for platform-independent packages (e.g., script files).
Typically a package is installed as a subdirectory of one of the
entries in <b>$tcl_pkgPath</b>. The directories in
<b>$tcl_pkgPath</b> are included by default in the <b>auto_path</b>
variable, so they and their immediate subdirectories are
automatically searched for packages during <b>package require</b>
commands. Note: <b>tcl_pkgPath</b> it not intended to be modified
by the application. Its value is added to <b>auto_path</b> at
startup; changes to <b>tcl_pkgPath</b> are not reflected in
<b>auto_path</b>. If you want Tcl to search additional directories
for packages you should add the names of those directories to
<b>auto_path</b>, not <b>tcl_pkgPath</b>.</dd>

<dt><a name="M29"><b>tcl_platform</b></a></dt>

<dd>This is an associative array whose elements contain information
about the platform on which the application is running, such as the
name of the operating system, its current release number, and the
machine's instruction set. The elements listed below will always be
defined, but they may have empty strings as values if Tcl couldn't
retrieve any relevant information. In addition, extensions and
applications may add additional values to the array. The predefined
elements are: 

<dl>
<dt><a name="M30"><b>byteOrder</b></a></dt>

<dd>The native byte order of this machine: either
<b>littleEndian</b> or <b>bigEndian</b>.</dd>

<dt><a name="M31"><b>debug</b></a></dt>

<dd>If this variable exists, then the interpreter was compiled with
debugging symbols enabled. This variable will only exist on Windows
so extension writers can specify which package to load depending on
the C run-time library that is loaded.</dd>

<dt><a name="M32"><b>machine</b></a></dt>

<dd>The instruction set executed by this machine, such as
<b>intel</b>, <b>PPC</b>, <b>68k</b>, or <b>sun4m</b>. On UNIX
machines, this is the value returned by <b>uname -m</b>.</dd>

<dt><a name="M33"><b>os</b></a></dt>

<dd>The name of the operating system running on this machine, such
as <b>Windows 95</b>, <b>Windows NT</b>, <b>MacOS</b>, or
<b>SunOS</b>. On UNIX machines, this is the value returned by
<b>uname -s</b>. On Windows 95 and Windows 98, the value returned
will be <b>Windows 95</b> to provide better backwards compatibility
to Windows 95; to distinguish between the two, check the
<b>osVersion</b>.</dd>

<dt><a name="M34"><b>osVersion</b></a></dt>

<dd>The version number for the operating system running on this
machine. On UNIX machines, this is the value returned by <b>uname
-r</b>. On Windows 95, the version will be 4.0; on Windows 98, the
version will be 4.10.</dd>

<dt><a name="M35"><b>platform</b></a></dt>

<dd>Either <b>windows</b>, <b>macintosh</b>, or <b>unix</b>. This
identifies the general operating environment of the machine.</dd>

<dt><a name="M36"><b>threaded</b></a></dt>

<dd>If this variable exists, then the interpreter was compiled with
threads enabled.</dd>

<dt><a name="M37"><b>user</b></a></dt>

<dd>This identifies the current user based on the login information
available on the platform. This comes from the USER or LOGNAME
environment variable on Unix, and the value from GetUserName on
Windows and Macintosh.</dd>

<dt><a name="M38"><b>wordSize</b></a></dt>

<dd>This gives the size of the native-machine word in bytes
(strictly, it is same as the result of evaluating
<i>sizeof(long)</i> in C.)</dd>
</dl>
</dd>

<dt><a name="M39"><b>tcl_precision</b></a></dt>

<dd>This variable controls the number of digits to generate when
converting floating-point values to strings. It defaults to 12. 17
digits is ``perfect'' for IEEE floating-point in that it allows
double-precision values to be converted to strings and back to
binary with no loss of information. However, using 17 digits
prevents any rounding, which produces longer, less intuitive
results. For example, <b>expr 1.4</b> returns 1.3999999999999999
with <b>tcl_precision</b> set to 17, vs. 1.4 if
<b>tcl_precision</b> is 12. 

<dl>
<dd>All interpreters in a process share a single
<b>tcl_precision</b> value: changing it in one interpreter will
affect all other interpreters as well. However, safe interpreters
are not allowed to modify the variable.</dd>
</dl>
</dd>

<dt><a name="M40"><b>tcl_rcFileName</b></a></dt>

<dd>This variable is used during initialization to indicate the
name of a user-specific startup file. If it is set by
application-specific initialization, then the Tcl startup code will
check for the existence of this file and <b><a href=
"../TclCmd/source.htm">source</a></b> it if it exists. For example,
for <b><a href="../UserCmd/wish.htm">wish</a></b> the variable is
set to <b>~/.wishrc</b> for Unix and <b>~/wishrc.tcl</b> for
Windows.</dd>

<dt><a name="M41"><b>tcl_rcRsrcName</b></a></dt>

<dd>This variable is only used on Macintosh systems. The variable
is used during initialization to indicate the name of a
user-specific <b><a href="../TkCmd/text.htm">TEXT</a></b> resource
located in the application or extension resource forks. If it is
set by application-specific initialization, then the Tcl startup
code will check for the existence of this resource and <b><a href=
"../TclCmd/source.htm">source</a></b> it if it exists. For example,
the Macintosh <b><a href="../UserCmd/wish.htm">wish</a></b>
application has the variable is set to <b>tclshrc</b>.</dd>

<dt><a name="M42"><b>tcl_traceCompile</b></a></dt>

<dd>The value of this variable can be set to control how much
tracing information is displayed during bytecode compilation. By
default, tcl_traceCompile is zero and no information is displayed.
Setting tcl_traceCompile to 1 generates a one line summary in
stdout whenever a procedure or top level command is compiled.
Setting it to 2 generates a detailed listing in stdout of the
bytecode instructions emitted during every compilation. This
variable is useful in tracking down suspected problems with the Tcl
compiler. It is also occasionally useful when converting existing
code to use Tcl8.0. This variable and functionality only exist if
TCL_COMPILE_DEBUG was defined during Tcl's compilation.</dd>

<dt><a name="M43"><b>tcl_traceExec</b></a></dt>

<dd>The value of this variable can be set to control how much
tracing information is displayed during bytecode execution. By
default, tcl_traceExec is zero and no information is displayed.
Setting tcl_traceExec to 1 generates a one line trace in stdout on
each call to a Tcl procedure. Setting it to 2 generates a line of
output whenever any Tcl command is invoked that contains the name
of the command and its arguments. Setting it to 3 produces a
detailed trace showing the result of executing each bytecode
instruction. Note that when tcl_traceExec is 2 or 3, commands such
as set and incr that have been entirely replaced by a sequence of
bytecode instructions are not shown. Setting this variable is
useful in tracking down suspected problems with the bytecode
compiler and interpreter. It is also occasionally useful when
converting code to use Tcl8.0. This variable and functionality only
exist if TCL_COMPILE_DEBUG was defined during Tcl's
compilation.</dd>

<dt><a name="M44"><b>tcl_wordchars</b></a></dt>

<dd>The value of this variable is a regular expression that can be
set to control what are considered ``word'' characters, for
instances like selecting a word by double-clicking in text in Tk.
It is platform dependent. On Windows, it defaults to <b>\S</b>,
meaning anything but a Unicode space character. Otherwise it
defaults to <b>\w</b>, which is any Unicode word character (number,
letter, or underscore).</dd>

<dt><a name="M45"><b>tcl_nonwordchars</b></a></dt>

<dd>The value of this variable is a regular expression that can be
set to control what are considered ``non-word'' characters, for
instances like selecting a word by double-clicking in text in Tk.
It is platform dependent. On Windows, it defaults to <b>\s</b>,
meaning any Unicode space character. Otherwise it defaults to
<b>\W</b>, which is anything but a Unicode word character (number,
letter, or underscore).</dd>

<dt><a name="M46"><b>tcl_version</b></a></dt>

<dd>When an interpreter is created Tcl initializes this variable to
hold the version number for this version of Tcl in the form
<i>x.y</i>. Changes to <i>x</i> represent major changes with
probable incompatibilities and changes to <i>y</i> represent small
enhancements and bug fixes that retain backward compatibility. The
value of this variable is returned by the <b><a href=
"../TclCmd/info.htm">info tclversion</a></b> command.</dd>
</dl>

<h3><a name="M47">SEE ALSO</a></h3>

<p><b><a href="../TclCmd/eval.htm">eval</a></b></p>

<h3><a name="M48">KEYWORDS</a></h3>

<p><a href="../Keywords/A.htm#arithmetic">arithmetic</a>, <a href=
"../Keywords/B.htm#bytecode">bytecode</a>, <a href=
"../Keywords/C.htm#compiler">compiler</a>, <a href=
"../Keywords/E.htm#error">error</a>, <a href=
"../Keywords/E.htm#environment">environment</a>, <a href=
"../Keywords/P.htm#POSIX">POSIX</a>, <a href=
"../Keywords/P.htm#precision">precision</a>, <a href=
"../Keywords/S.htm#subprocess">subprocess</a>, <a href=
"../Keywords/V.htm#variables">variables</a></p>

<hr>
<pre>
<a href=
"../copyright.htm">Copyright</a> &copy; 1993 The Regents of the University of California.
<a href=
"../copyright.htm">Copyright</a> &copy; 1994-1997 Sun Microsystems, Inc.
<a href=
"../copyright.htm">Copyright</a> &copy; 1995-1997 Roger E. Critchlow Jr.
</pre>
</body>
</html>

