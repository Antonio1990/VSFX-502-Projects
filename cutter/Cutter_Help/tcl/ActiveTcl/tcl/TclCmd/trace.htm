<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Built-In Commands - trace manual page</title>
</head>
<body>
<table width='100%' border='0' cellspacing='0' cellpadding='0'
bgcolor='EAE2BB'>
<tr>
<td><a target='_blank' href=
'http://www.ActiveState.com/Products/ActiveTcl'><img src=
'../../images/ActiveTcl.gif' border='0' align='left' height='61'
width='64'></a> </td>
<td>
<div align='center' class='heading'>ActiveTcl User Guide</div>
</td>
<td><a target='_blank' href='http://www.ActiveState.com'><img src=
'../../images/AS_logo.gif' border='0' align='right' height='48'
width='112'></a> </td>
</tr>

<tr>
<td class='lineColour' colspan='3'></td>
</tr>
</table>

<br>
<dl>
<dd><a href="trace.htm#M2" name="L1448">NAME</a> 

<dl>
<dd>trace - Monitor variable accesses, command usages and command
executions</dd>
</dl>
</dd>

<dd><a href="trace.htm#M3" name="L1449">SYNOPSIS</a> 

<dl>
<dd><b>trace</b> <i>option</i> ?<i>arg arg ...</i>?</dd>
</dl>
</dd>

<dd><a href="trace.htm#M4" name="L1450">DESCRIPTION</a> 

<dl>
<dd><a href="trace.htm#M5" name="L1451"><b>trace add</b> <i>type
name ops ?args?</i></a> 

<dl>
<dd><a href="trace.htm#M6" name="L1452"><b>trace add command</b>
<i>name ops command</i></a> 

<dl>
<dd><a href="trace.htm#M7" name="L1453"><b>rename</b></a></dd>

<dd><a href="trace.htm#M8" name="L1454"><b>delete</b></a></dd>
</dl>
</dd>

<dd><a href="trace.htm#M9" name="L1455"><b>trace add execution</b>
<i>name ops command</i></a> 

<dl>
<dd><a href="trace.htm#M10" name="L1456"><b>enter</b></a></dd>

<dd><a href="trace.htm#M11" name="L1457"><b>leave</b></a></dd>

<dd><a href="trace.htm#M12" name="L1458"><b>enterstep</b></a></dd>

<dd><a href="trace.htm#M13" name="L1459"><b>leavestep</b></a></dd>
</dl>
</dd>

<dd><a href="trace.htm#M14" name="L1460"><b>trace add variable</b>
<i>name ops command</i></a> 

<dl>
<dd><a href="trace.htm#M15" name="L1461"><b>array</b></a></dd>

<dd><a href="trace.htm#M16" name="L1462"><b>read</b></a></dd>

<dd><a href="trace.htm#M17" name="L1463"><b>write</b></a></dd>

<dd><a href="trace.htm#M18" name="L1464"><b>unset</b></a></dd>
</dl>
</dd>
</dl>
</dd>

<dd><a href="trace.htm#M19" name="L1465"><b>trace remove</b>
<i>type name opList command</i></a> 

<dl>
<dd><a href="trace.htm#M20" name="L1466"><b>trace remove
command</b> <i>name opList command</i></a></dd>

<dd><a href="trace.htm#M21" name="L1467"><b>trace remove
execution</b> <i>name opList command</i></a></dd>

<dd><a href="trace.htm#M22" name="L1468"><b>trace remove
variable</b> <i>name opList command</i></a></dd>
</dl>
</dd>

<dd><a href="trace.htm#M23" name="L1469"><b>trace info</b> <i>type
name</i></a> 

<dl>
<dd><a href="trace.htm#M24" name="L1470"><b>trace info command</b>
<i>name</i></a></dd>

<dd><a href="trace.htm#M25" name="L1471"><b>trace info
execution</b> <i>name</i></a></dd>

<dd><a href="trace.htm#M26" name="L1472"><b>trace info variable</b>
<i>name</i></a></dd>
</dl>
</dd>
</dl>

<dl>
<dd><a href="trace.htm#M27" name="L1473"><b>trace variable</b>
<i>name ops command</i></a></dd>

<dd><a href="trace.htm#M28" name="L1474"><b>trace vdelete</b>
<i>name ops command</i></a></dd>

<dd><a href="trace.htm#M29" name="L1475"><b>trace vinfo</b>
<i>name</i></a></dd>
</dl>
</dd>

<dd><a href="trace.htm#M30" name="L1476">SEE ALSO</a></dd>

<dd><a href="trace.htm#M31" name="L1477">KEYWORDS</a></dd>
</dl>

<hr>
<h3><a name="M2">NAME</a></h3>

<p>trace - Monitor variable accesses, command usages and command
executions</p>

<h3><a name="M3">SYNOPSIS</a></h3>

<p><b>trace</b> <i>option</i> ?<i>arg arg ...</i>?<br>
</p>

<h3><a name="M4">DESCRIPTION</a></h3>

<p>This command causes Tcl commands to be executed whenever certain
operations are invoked. The legal <i>option</i>'s (which may be
abbreviated) are:</p>

<dl>
<dt><a name="M5"><b>trace add</b> <i>type name ops
?args?</i></a></dt>

<dd>Where <i>type</i> is <b>command</b>, <b>execution</b>, or <b><a
href="../TclCmd/variable.htm">variable</a></b>. 

<dl>
<dt><a name="M6"><b>trace add command</b> <i>name ops
command</i></a></dt>

<dd>Arrange for <i>command</i> to be executed whenever command
<i>name</i> is modified in one of the ways given by the list
<i>ops</i>. <i>Name</i> will be resolved using the usual namespace
resolution rules used by procedures. If the command does not exist,
an error will be thrown. 

<p><i>Ops</i> indicates which operations are of interest, and is a
list of one or more of the following items:</p>

<dl>
<dt><a name="M7"><b>rename</b></a></dt>

<dd>Invoke <i>command</i> whenever the command is renamed. Note
that renaming to the empty string is considered deletion, and will
not be traced with '<b><a href=
"../TclCmd/rename.htm">rename</a></b>'.</dd>

<dt><a name="M8"><b>delete</b></a></dt>

<dd>Invoke <i>command</i> when the command is deleted. Commands can
be deleted explicitly by using the <b><a href=
"../TclCmd/rename.htm">rename</a></b> command to rename the command
to an empty string. Commands are also deleted when the interpreter
is deleted, but traces will not be invoked because there is no
interpreter in which to execute them.</dd>
</dl>

<p>When the trace triggers, depending on the operations being
traced, a number of arguments are appended to <i>command</i> so
that the actual command is as follows:</p>

<pre>
<i>command oldName newName op</i>
</pre>

<p><i>OldName</i> and <i>newName</i> give the traced command's
current (old) name, and the name to which it is being renamed (the
empty string if this is a 'delete' operation). <i>Op</i> indicates
what operation is being performed on the command, and is one of
<b><a href="../TclCmd/rename.htm">rename</a></b> or <b>delete</b>
as defined above. The trace operation cannot be used to stop a
command from being deleted. Tcl will always remove the command once
the trace is complete. Recursive renaming or deleting will not
cause further traces of the same type to be evaluated, so a delete
trace which itself deletes the command, or a rename trace which
itself renames the command will not cause further trace evaluations
to occur. Both <i>oldName</i> and <i>newName</i> are fully
qualified with any namespace(s) in which they appear.</p>
</dd>

<dt><a name="M9"><b>trace add execution</b> <i>name ops
command</i></a></dt>

<dd>Arrange for <i>command</i> to be executed whenever command
<i>name</i> is modified in one of the ways given by the list
<i>ops</i>. <i>Name</i> will be resolved using the usual namespace
resolution rules used by procedures. If the command does not exist,
an error will be thrown. 

<p><i>Ops</i> indicates which operations are of interest, and is a
list of one or more of the following items:</p>

<dl>
<dt><a name="M10"><b>enter</b></a></dt>

<dd>Invoke <i>command</i> whenever the command <i>name</i> is
executed, just before the actual execution takes place.</dd>

<dt><a name="M11"><b>leave</b></a></dt>

<dd>Invoke <i>command</i> whenever the command <i>name</i> is
executed, just after the actual execution takes place.</dd>

<dt><a name="M12"><b>enterstep</b></a></dt>

<dd>Invoke <i>command</i> for every tcl command which is executed
inside the procedure <i>name</i>, just before the actual execution
takes place. For example if we have 'proc foo {} { puts "hello" }',
then a <i>enterstep</i> trace would be invoked just before <i>puts
"hello"</i> is executed. Setting a <i>enterstep</i> trace on a
<i>command</i> will not result in an error and is simply
ignored.</dd>

<dt><a name="M13"><b>leavestep</b></a></dt>

<dd>Invoke <i>command</i> for every tcl command which is executed
inside the procedure <i>name</i>, just after the actual execution
takes place. Setting a <i>leavestep</i> trace on a <i>command</i>
will not result in an error and is simply ignored.</dd>
</dl>

<p>When the trace triggers, depending on the operations being
traced, a number of arguments are appended to <i>command</i> so
that the actual command is as follows:</p>

<p>For <b>enter</b> and <b>enterstep</b> operations:</p>

<pre>
<i>command command-string op</i>
</pre>

<p><i>Command-string</i> gives the complete current command being
executed (the traced command for a <b>enter</b> operation, an
arbitrary command for a <b>enterstep</b> operation), including all
arguments in their fully expanded form. <i>Op</i> indicates what
operation is being performed on the command execution, and is one
of <b>enter</b> or <b>enterstep</b> as defined above. The trace
operation can be used to stop the command from executing, by
deleting the command in question. Of course when the command is
subsequently executed, an 'invalid command' error will occur.</p>

<p>For <b>leave</b> and <b>leavestep</b> operations:</p>

<pre>
<i>command command-string code result op</i>
</pre>

<p><i>Command-string</i> gives the complete current command being
executed (the traced command for a <b>enter</b> operation, an
arbitrary command for a <b>enterstep</b> operation), including all
arguments in their fully expanded form. <i>Code</i> gives the
result code of that execution, and <i>result</i> the result string.
<i>Op</i> indicates what operation is being performed on the
command execution, and is one of <b>leave</b> or <b>leavestep</b>
as defined above. Note that the creation of many <b>enterstep</b>
or <b>leavestep</b> traces can lead to unintuitive results, since
the invoked commands from one trace can themselves lead to further
command invocations for other traces. <i>Command</i> executes in
the same context as the code that invoked the traced operation:
thus the <i>command</i>, if invoked from a procedure, will have
access to the same local variables as code in the procedure. This
context may be different than the context in which the trace was
created. If <i>command</i> invokes a procedure (which it normally
does) then the procedure will have to use upvar or uplevel commands
if it wishes to access the local variables of the code which
invoked the trace operation. While <i>command</i> is executing
during an execution trace, traces on <i>name</i> are temporarily
disabled. This allows the <i>command</i> to execute <i>name</i> in
its body without invoking any other traces again. If an error
occurs while executing the <i>command</i> body, then the
<i>command</i> name as a whole will return that same error. When
multiple traces are set on <i>name</i>, then for <i>enter</i> and
<i>enterstep</i> operations, the traced commands are invoked in the
reverse order of how the traces were originally created; and for
<i>leave</i> and <i>leavestep</i> operations, the traced commands
are invoked in the original order of creation. The behavior of
execution traces is currently undefined for a command <i>name</i>
imported into another namespace.</p>
</dd>

<dt><a name="M14"><b>trace add variable</b> <i>name ops
command</i></a></dt>

<dd>Arrange for <i>command</i> to be executed whenever variable
<i>name</i> is accessed in one of the ways given by the list
<i>ops</i>. <i>Name</i> may refer to a normal variable, an element
of an array, or to an array as a whole (i.e. <i>name</i> may be
just the name of an array, with no parenthesized index). If
<i>name</i> refers to a whole array, then <i>command</i> is invoked
whenever any element of the array is manipulated. If the variable
does not exist, it will be created but will not be given a value,
so it will be visible to <b>namespace which</b> queries, but not to
<b><a href="../TclCmd/info.htm">info exists</a></b> queries. 

<p><i>Ops</i> indicates which operations are of interest, and is a
list of one or more of the following items:</p>

<dl>
<dt><a name="M15"><b>array</b></a></dt>

<dd>Invoke <i>command</i> whenever the variable is accessed or
modified via the <b><a href="../TclCmd/array.htm">array</a></b>
command, provided that <i>name</i> is not a scalar variable at the
time that the <b><a href="../TclCmd/array.htm">array</a></b>
command is invoked. If <i>name</i> is a scalar variable, the access
via the <b><a href="../TclCmd/array.htm">array</a></b> command will
not trigger the trace.</dd>

<dt><a name="M16"><b>read</b></a></dt>

<dd>Invoke <i>command</i> whenever the variable is read.</dd>

<dt><a name="M17"><b>write</b></a></dt>

<dd>Invoke <i>command</i> whenever the variable is written.</dd>

<dt><a name="M18"><b>unset</b></a></dt>

<dd>Invoke <i>command</i> whenever the variable is unset. Variables
can be unset explicitly with the <b><a href=
"../TclCmd/unset.htm">unset</a></b> command, or implicitly when
procedures return (all of their local variables are unset).
Variables are also unset when interpreters are deleted, but traces
will not be invoked because there is no interpreter in which to
execute them.</dd>
</dl>

<p>When the trace triggers, three arguments are appended to
<i>command</i> so that the actual command is as follows:</p>

<pre>
<i>command name1 name2 op</i>
</pre>

<p><i>Name1</i> and <i>name2</i> give the name(s) for the variable
being accessed: if the variable is a scalar then <i>name1</i> gives
the variable's name and <i>name2</i> is an empty string; if the
variable is an array element then <i>name1</i> gives the name of
the array and name2 gives the index into the array; if an entire
array is being deleted and the trace was registered on the overall
array, rather than a single element, then <i>name1</i> gives the
array name and <i>name2</i> is an empty string. <i>Name1</i> and
<i>name2</i> are not necessarily the same as the name used in the
<b>trace variable</b> command: the <b><a href=
"../TclCmd/upvar.htm">upvar</a></b> command allows a procedure to
reference a variable under a different name. <i>Op</i> indicates
what operation is being performed on the variable, and is one of
<b><a href="../TclCmd/read.htm">read</a></b>, <b>write</b>, or
<b><a href="../TclCmd/unset.htm">unset</a></b> as defined
above.</p>

<p><i>Command</i> executes in the same context as the code that
invoked the traced operation: if the variable was accessed as part
of a Tcl procedure, then <i>command</i> will have access to the
same local variables as code in the procedure. This context may be
different than the context in which the trace was created. If
<i>command</i> invokes a procedure (which it normally does) then
the procedure will have to use <b><a href=
"../TclCmd/upvar.htm">upvar</a></b> or <b><a href=
"../TclCmd/uplevel.htm">uplevel</a></b> if it wishes to access the
traced variable. Note also that <i>name1</i> may not necessarily be
the same as the name used to set the trace on the variable;
differences can occur if the access is made through a variable
defined with the <b><a href="../TclCmd/upvar.htm">upvar</a></b>
command.</p>

<p>For read and write traces, <i>command</i> can modify the
variable to affect the result of the traced operation. If
<i>command</i> modifies the value of a variable during a read or
write trace, then the new value will be returned as the result of
the traced operation. The return value from <i>command</i> is
ignored except that if it returns an error of any sort then the
traced operation also returns an error with the same error message
returned by the trace command (this mechanism can be used to
implement read-only variables, for example). For write traces,
<i>command</i> is invoked after the variable's value has been
changed; it can write a new value into the variable to override the
original value specified in the write operation. To implement
read-only variables, <i>command</i> will have to restore the old
value of the variable.</p>

<p>While <i>command</i> is executing during a read or write trace,
traces on the variable are temporarily disabled. This means that
reads and writes invoked by <i>command</i> will occur directly,
without invoking <i>command</i> (or any other traces) again.
However, if <i>command</i> unsets the variable then unset traces
will be invoked.</p>

<p>When an unset trace is invoked, the variable has already been
deleted: it will appear to be undefined with no traces. If an unset
occurs because of a procedure return, then the trace will be
invoked in the variable context of the procedure being returned to:
the stack frame of the returning procedure will no longer exist.
Traces are not disabled during unset traces, so if an unset trace
command creates a new trace and accesses the variable, the trace
will be invoked. Any errors in unset traces are ignored.</p>

<p>If there are multiple traces on a variable they are invoked in
order of creation, most-recent first. If one trace returns an
error, then no further traces are invoked for the variable. If an
array element has a trace set, and there is also a trace set on the
array as a whole, the trace on the overall array is invoked before
the one on the element.</p>

<p>Once created, the trace remains in effect either until the trace
is removed with the <b>trace remove variable</b> command described
below, until the variable is unset, or until the interpreter is
deleted. Unsetting an element of array will remove any traces on
that element, but will not remove traces on the overall array.</p>

<p>This command returns an empty string.</p>
</dd>
</dl>
</dd>

<dt><a name="M19"><b>trace remove</b> <i>type name opList
command</i></a></dt>

<dd>Where <i>type</i> is either <b>command</b>, <b>execution</b> or
<b><a href="../TclCmd/variable.htm">variable</a></b>. 

<dl>
<dt><a name="M20"><b>trace remove command</b> <i>name opList
command</i></a></dt>

<dd>If there is a trace set on command <i>name</i> with the
operations and command given by <i>opList</i> and <i>command</i>,
then the trace is removed, so that <i>command</i> will never again
be invoked. Returns an empty string. If <i>name</i> doesn't exist,
the command will throw an error.</dd>

<dt><a name="M21"><b>trace remove execution</b> <i>name opList
command</i></a></dt>

<dd>If there is a trace set on command <i>name</i> with the
operations and command given by <i>opList</i> and <i>command</i>,
then the trace is removed, so that <i>command</i> will never again
be invoked. Returns an empty string. If <i>name</i> doesn't exist,
the command will throw an error.</dd>

<dt><a name="M22"><b>trace remove variable</b> <i>name opList
command</i></a></dt>

<dd>If there is a trace set on variable <i>name</i> with the
operations and command given by <i>opList</i> and <i>command</i>,
then the trace is removed, so that <i>command</i> will never again
be invoked. Returns an empty string.</dd>
</dl>
</dd>

<dt><a name="M23"><b>trace info</b> <i>type name</i></a></dt>

<dd>Where <i>type</i> is either <b>command</b>, <b>execution</b> or
<b><a href="../TclCmd/variable.htm">variable</a></b>. 

<dl>
<dt><a name="M24"><b>trace info command</b> <i>name</i></a></dt>

<dd>Returns a list containing one element for each trace currently
set on command <i>name</i>. Each element of the list is itself a
list containing two elements, which are the <i>opList</i> and
<i>command</i> associated with the trace. If <i>name</i> doesn't
have any traces set, then the result of the command will be an
empty string. If <i>name</i> doesn't exist, the command will throw
an error.</dd>

<dt><a name="M25"><b>trace info execution</b> <i>name</i></a></dt>

<dd>Returns a list containing one element for each trace currently
set on command <i>name</i>. Each element of the list is itself a
list containing two elements, which are the <i>opList</i> and
<i>command</i> associated with the trace. If <i>name</i> doesn't
have any traces set, then the result of the command will be an
empty string. If <i>name</i> doesn't exist, the command will throw
an error.</dd>

<dt><a name="M26"><b>trace info variable</b> <i>name</i></a></dt>

<dd>Returns a list containing one element for each trace currently
set on variable <i>name</i>. Each element of the list is itself a
list containing two elements, which are the <i>opList</i> and
<i>command</i> associated with the trace. If <i>name</i> doesn't
exist or doesn't have any traces set, then the result of the
command will be an empty string.</dd>
</dl>
</dd>
</dl>

<p>For backwards compatibility, three other subcommands are
available:</p>

<dl>
<dt><a name="M27"><b>trace variable</b> <i>name ops
command</i></a></dt>

<dd>This is equivalent to <b>trace add variable</b> <i>name ops
command</i>.</dd>

<dt><a name="M28"><b>trace vdelete</b> <i>name ops
command</i></a></dt>

<dd>This is equivalent to <b>trace remove variable</b> <i>name ops
command</i></dd>

<dt><a name="M29"><b>trace vinfo</b> <i>name</i></a></dt>

<dd>This is equivalent to <b>trace info variable</b>
<i>name</i></dd>
</dl>

<p>These subcommands are deprecated and will likely be removed in a
future version of Tcl. They use an older syntax in which <b><a
href="../TclCmd/array.htm">array</a></b>, <b><a href=
"../TclCmd/read.htm">read</a></b>, <b>write</b>, <b><a href=
"../TclCmd/unset.htm">unset</a></b> are replaced by <b>a</b>,
<b>r</b>, <b>w</b> and <b>u</b> respectively, and the <i>ops</i>
argument is not a list, but simply a string concatenation of the
operations, such as <b>rwua</b>.</p>

<h3><a name="M30">SEE ALSO</a></h3>

<p><b><a href="../TclCmd/set.htm">set</a></b>, <b><a href=
"../TclCmd/unset.htm">unset</a></b></p>

<h3><a name="M31">KEYWORDS</a></h3>

<p><a href="../Keywords/R.htm#read">read</a>, <a href=
"../Keywords/C.htm#command">command</a>, <a href=
"../Keywords/R.htm#rename">rename</a>, <a href=
"../Keywords/V.htm#variable">variable</a>, <a href=
"../Keywords/W.htm#write">write</a>, <a href=
"../Keywords/T.htm#trace">trace</a>, <a href=
"../Keywords/U.htm#unset">unset</a></p>

<hr>
<pre>
<a href=
"../copyright.htm">Copyright</a> &copy; 1993 The Regents of the University of California.
<a href=
"../copyright.htm">Copyright</a> &copy; 1994-1996 Sun Microsystems, Inc.
<a href=
"../copyright.htm">Copyright</a> &copy; 2000 Ajuba Solutions.
<a href=
"../copyright.htm">Copyright</a> &copy; 1995-1997 Roger E. Critchlow Jr.
</pre>
</body>
</html>

