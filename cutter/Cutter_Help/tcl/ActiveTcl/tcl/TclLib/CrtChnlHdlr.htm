<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Library Procedures - Tcl_CreateChannelHandler manual
page</title>
</head>
<body>
<table width='100%' border='0' cellspacing='0' cellpadding='0'
bgcolor='EAE2BB'>
<tr>
<td><a target='_blank' href=
'http://www.ActiveState.com/Products/ActiveTcl'><img src=
'../../images/ActiveTcl.gif' border='0' align='left' height='61'
width='64'></a> </td>
<td>
<div align='center' class='heading'>ActiveTcl User Guide</div>
</td>
<td><a target='_blank' href='http://www.ActiveState.com'><img src=
'../../images/AS_logo.gif' border='0' align='right' height='48'
width='112'></a> </td>
</tr>

<tr>
<td class='lineColour' colspan='3'></td>
</tr>
</table>

<br>
<h3><a name="M2">NAME</a></h3>

<p>Tcl_CreateChannelHandler, Tcl_DeleteChannelHandler - call a
procedure when a channel becomes readable or writable</p>

<h3><a name="M3">SYNOPSIS</a></h3>

<p><b>#include &lt;tcl.h&gt;</b><br>
void<br>
<b>Tcl_CreateChannelHandler</b>(<i>channel, mask, proc,
clientData</i>)<br>
void<br>
<b>Tcl_DeleteChannelHandler</b>(<i>channel, proc,
clientData</i>)<br>
</p>

<h3><a name="M4">ARGUMENTS</a></h3>

<dl>
<dt>Tcl_Channel <b>channel</b> (in)</dt>

<dd>Tcl channel such as returned by <b><a href=
"../TclLib/CrtChannel.htm">Tcl_CreateChannel</a></b>.</dd>

<dt>int <b>mask</b> (in)</dt>

<dd>Conditions under which <i>proc</i> should be called: OR-ed
combination of <b>TCL_READABLE</b>, <b>TCL_WRITABLE</b> and
<b>TCL_EXCEPTION</b>. Specify a zero value to temporarily disable
an existing handler.</dd>

<dt>Tcl_FileProc <b>*proc</b> (in)</dt>

<dd>Procedure to invoke whenever the channel indicated by
<i>channel</i> meets the conditions specified by <i>mask</i>.</dd>

<dt>ClientData <b>clientData</b> (in)</dt>

<dd>Arbitrary one-word value to pass to <i>proc</i>.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

<p><b>Tcl_CreateChannelHandler</b> arranges for <i>proc</i> to be
called in the future whenever input or output becomes possible on
the channel identified by <i>channel</i>, or whenever an
exceptional condition exists for <i>channel</i>. The conditions of
interest under which <i>proc</i> will be invoked are specified by
the <i>mask</i> argument. See the manual entry for <b><a href=
"../TclCmd/fileevent.htm">fileevent</a></b> for a precise
description of what it means for a channel to be readable or
writable. <i>Proc</i> must conform to the following prototype:</p>

<pre>
typedef void Tcl_ChannelProc(
    ClientData <i>clientData</i>,
    int <i>mask</i>);
</pre>

<p>The <i>clientData</i> argument is the same as the value passed
to <b>Tcl_CreateChannelHandler</b> when the handler was created.
Typically, <i>clientData</i> points to a data structure containing
application-specific information about the channel. <i>Mask</i> is
an integer mask indicating which of the requested conditions
actually exists for the channel; it will contain a subset of the
bits from the <i>mask</i> argument to
<b>Tcl_CreateChannelHandler</b> when the handler was created.</p>

<p>Each channel handler is identified by a unique combination of
<i>channel</i>, <i>proc</i> and <i>clientData</i>. There may be
many handlers for a given channel as long as they don't have the
same <i>channel</i>, <i>proc</i>, and <i>clientData</i>. If
<b>Tcl_CreateChannelHandler</b> is invoked when there is already a
handler for <i>channel</i>, <i>proc</i>, and <i>clientData</i>,
then no new handler is created; instead, the <i>mask</i> is changed
for the existing handler.</p>

<p><b>Tcl_DeleteChannelHandler</b> deletes a channel handler
identified by <i>channel</i>, <i>proc</i> and <i>clientData</i>; if
no such handler exists, the call has no effect.</p>

<p>Channel handlers are invoked via the Tcl event mechanism, so
they are only useful in applications that are event-driven. Note
also that the conditions specified in the <i>mask</i> argument to
<i>proc</i> may no longer exist when <i>proc</i> is invoked: for
example, if there are two handlers for <b>TCL_READABLE</b> on the
same channel, the first handler could consume all of the available
input so that the channel is no longer readable when the second
handler is invoked. For this reason it may be useful to use
nonblocking I/O on channels for which there are event handlers.</p>

<h3><a name="M6">SEE ALSO</a></h3>

<p><b>Notifier</b>, <b><a href=
"../TclLib/CrtChannel.htm">Tcl_CreateChannel</a></b>, <b><a href=
"../TclLib/OpenFileChnl.htm">Tcl_OpenFileChannel</a></b>,
<b>vwait(n).</b></p>

<h3><a name="M7">KEYWORDS</a></h3>

<p><a href="../Keywords/B.htm#blocking">blocking</a>, <a href=
"../Keywords/C.htm#callback">callback</a>, <a href=
"../Keywords/C.htm#channel">channel</a>, <a href=
"../Keywords/E.htm#events">events</a>, <a href=
"../Keywords/H.htm#handler">handler</a>, <a href=
"../Keywords/N.htm#nonblocking.">nonblocking.</a></p>

<hr>
<pre>
<a href=
"../copyright.htm">Copyright</a> &copy; 1996 Sun Microsystems, Inc.
<a href=
"../copyright.htm">Copyright</a> &copy; 1995-1997 Roger E. Critchlow Jr.
</pre>
</body>
</html>

