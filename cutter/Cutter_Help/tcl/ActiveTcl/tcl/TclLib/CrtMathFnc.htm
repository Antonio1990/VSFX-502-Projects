<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Library Procedures - Tcl_CreateMathFunc manual
page</title>
</head>
<body>
<table width='100%' border='0' cellspacing='0' cellpadding='0'
bgcolor='EAE2BB'>
<tr>
<td><a target='_blank' href=
'http://www.ActiveState.com/Products/ActiveTcl'><img src=
'../../images/ActiveTcl.gif' border='0' align='left' height='61'
width='64'></a> </td>
<td>
<div align='center' class='heading'>ActiveTcl User Guide</div>
</td>
<td><a target='_blank' href='http://www.ActiveState.com'><img src=
'../../images/AS_logo.gif' border='0' align='right' height='48'
width='112'></a> </td>
</tr>

<tr>
<td class='lineColour' colspan='3'></td>
</tr>
</table>

<br>
<h3><a name="M2">NAME</a></h3>

<p>Tcl_CreateMathFunc, Tcl_GetMathFuncInfo, Tcl_ListMathFuncs -
Define, query and enumerate math functions for expressions</p>

<h3><a name="M3">SYNOPSIS</a></h3>

<p><b>#include &lt;tcl.h&gt;</b><br>
void<br>
<b>Tcl_CreateMathFunc</b>(<i>interp, name, numArgs, argTypes, proc,
clientData</i>)<br>
int<br>
<b>Tcl_GetMathFuncInfo</b>(<i>interp, name, numArgsPtr,
argTypesPtr, procPtr, clientDataPtr</i>)<br>
Tcl_Obj *<br>
<b>Tcl_ListMathFuncs</b>(<i>interp, pattern</i>)<br>
</p>

<h3><a name="M4">ARGUMENTS</a></h3>

<dl>
<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(in)</dt>

<dd>Interpreter in which new function will be defined.</dd>

<dt>CONST char <b>*name</b> (in)</dt>

<dd>Name for new function.</dd>

<dt>int <b>numArgs</b> (in)</dt>

<dd>Number of arguments to new function; also gives size of
<i>argTypes</i> array.</dd>

<dt>Tcl_ValueType <b>*argTypes</b> (in)</dt>

<dd>Points to an array giving the permissible types for each
argument to function.</dd>

<dt>Tcl_MathProc <b>*proc</b> (in)</dt>

<dd>Procedure that implements the function.</dd>

<dt>ClientData <b>clientData</b> (in)</dt>

<dd>Arbitrary one-word value to pass to <i>proc</i> when it is
invoked.</dd>

<dt>int <b>*numArgsPtr</b> (out)</dt>

<dd>Points to a variable that will be set to contain the number of
arguments to the function.</dd>

<dt>Tcl_ValueType <b>*argTypesPtr</b> (out)</dt>

<dd>Points to a variable that will be set to contain a pointer to
an array giving the permissible types for each argument to the
function which will need to be freed up using <i><a href=
"../TclLib/Alloc.htm">Tcl_Free</a></i>.</dd>

<dt>Tcl_MathProc <b>*procPtr</b> (out)</dt>

<dd>Points to a variable that will be set to contain a pointer to
the implementation code for the function (or NULL if the function
is implemented directly in bytecode.)</dd>

<dt>ClientData <b>*clientDataPtr</b> (out)</dt>

<dd>Points to a variable that will be set to contain the clientData
argument passed to <i>Tcl_CreateMathFunc</i> when the function was
created if the function is not implemented directly in
bytecode.</dd>

<dt>CONST char <b>*pattern</b> (in)</dt>

<dd>Pattern to match against function names so as to filter them
(by passing to <i><a href=
"../TclLib/StrMatch.htm">Tcl_StringMatch</a></i>), or NULL to not
apply any filter.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

<p>Tcl allows a number of mathematical functions to be used in
expressions, such as <b>sin</b>, <b>cos</b>, and <b>hypot</b>.
<b>Tcl_CreateMathFunc</b> allows applications to add additional
functions to those already provided by Tcl or to replace existing
functions. <i>Name</i> is the name of the function as it will
appear in expressions. If <i>name</i> doesn't already exist as a
function then a new function is created. If it does exist, then the
existing function is replaced. <i>NumArgs</i> and <i>argTypes</i>
describe the arguments to the function. Each entry in the
<i>argTypes</i> array must be either TCL_INT, TCL_DOUBLE, or
TCL_EITHER to indicate whether the corresponding argument must be
an integer, a double-precision floating value, or either,
respectively.</p>

<p>Whenever the function is invoked in an expression Tcl will
invoke <i>proc</i>. <i>Proc</i> should have arguments and result
that match the type <b>Tcl_MathProc</b>:</p>

<pre>
typedef int Tcl_MathProc(
    ClientData <i>clientData</i>,
    <a href="../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>,
    Tcl_Value *<i>args</i>,
    Tcl_Value *<i>resultPtr</i>);
</pre>

<p>When <i>proc</i> is invoked the <i>clientData</i> and
<i>interp</i> arguments will be the same as those passed to
<b>Tcl_CreateMathFunc</b>. <i>Args</i> will point to an array of
<i>numArgs</i> Tcl_Value structures, which describe the actual
arguments to the function:</p>

<pre>
typedef struct Tcl_Value {
    Tcl_ValueType <i>type</i>;
    long <i>intValue</i>;
    double <i>doubleValue</i>;
} Tcl_Value;
</pre>

<p>The <i>type</i> field indicates the type of the argument and is
either TCL_INT or TCL_DOUBLE. It will match the <i>argTypes</i>
value specified for the function unless the <i>argTypes</i> value
was TCL_EITHER. Tcl converts the argument supplied in the
expression to the type requested in <i>argTypes</i>, if that is
necessary. Depending on the value of the <i>type</i> field, the
<i>intValue</i> or <i>doubleValue</i> field will contain the actual
value of the argument.</p>

<p><i>Proc</i> should compute its result and store it either as an
integer in <i>resultPtr-&gt;intValue</i> or as a floating value in
<i>resultPtr-&gt;doubleValue</i>. It should set also
<i>resultPtr-&gt;type</i> to either TCL_INT or TCL_DOUBLE to
indicate which value was set. Under normal circumstances
<i>proc</i> should return TCL_OK. If an error occurs while
executing the function, <i>proc</i> should return TCL_ERROR and
leave an error message in the interpreter's result.</p>

<p><b>Tcl_GetMathFuncInfo</b> retrieves the values associated with
function <i>name</i> that were passed to a preceding
<b>Tcl_CreateMathFunc</b> call. Normally, the return code is
<b>TCL_OK</b> but if the named function does not exist,
<b>TCL_ERROR</b> is returned and an error message is placed in the
interpreter's result.</p>

<p>If an error did not occur, the array reference placed in the
variable pointed to by <i>argTypesPtr</i> is newly allocated, and
should be released by passing it to <b><a href=
"../TclLib/Alloc.htm">Tcl_Free</a></b>. Some functions (the
standard set implemented in the core) are implemented directly at
the bytecode level; attempting to retrieve values for them causes a
NULL to be stored in the variable pointed to by <i>procPtr</i> and
the variable pointed to by <i>clientDataPtr</i> will not be
modified.</p>

<p><b>Tcl_ListMathFuncs</b> returns a Tcl object containing a list
of all the math functions defined in the interpreter whose name
matches <i>pattern</i>. In the case of an error, NULL is returned
and an error message is left in the interpreter result, and
otherwise the returned object will have a reference count of
zero.</p>

<h3><a name="M6">KEYWORDS</a></h3>

<p><a href="../Keywords/E.htm#expression">expression</a>, <a href=
"../Keywords/M.htm#mathematical function">mathematical
function</a></p>

<h3><a name="M7">SEE ALSO</a></h3>

<p><b><a href="../TclCmd/expr.htm">expr</a></b>, <b><a href=
"../TclCmd/info.htm">info</a></b>, <b><a href=
"../TclLib/Alloc.htm">Tcl_Free</a></b>, <b><a href=
"../TclLib/ListObj.htm">Tcl_NewListObj</a></b></p>

<hr>
<pre>
<a href=
"../copyright.htm">Copyright</a> &copy; 1989-1993 The Regents of the University of California.
<a href=
"../copyright.htm">Copyright</a> &copy; 1994-1996 Sun Microsystems, Inc.
<a href=
"../copyright.htm">Copyright</a> &copy; 1995-1997 Roger E. Critchlow Jr.
</pre>
</body>
</html>

