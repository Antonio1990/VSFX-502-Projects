<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Library Procedures - Tcl_ObjType manual page</title>
</head>
<body>
<table width='100%' border='0' cellspacing='0' cellpadding='0'
bgcolor='EAE2BB'>
<tr>
<td><a target='_blank' href=
'http://www.ActiveState.com/Products/ActiveTcl'><img src=
'../../images/ActiveTcl.gif' border='0' align='left' height='61'
width='64'></a> </td>
<td>
<div align='center' class='heading'>ActiveTcl User Guide</div>
</td>
<td><a target='_blank' href='http://www.ActiveState.com'><img src=
'../../images/AS_logo.gif' border='0' align='right' height='48'
width='112'></a> </td>
</tr>

<tr>
<td class='lineColour' colspan='3'></td>
</tr>
</table>

<br>
<h3><a name="M2">NAME</a></h3>

<p>Tcl_RegisterObjType, Tcl_GetObjType, Tcl_AppendAllObjTypes,
Tcl_ConvertToType - manipulate Tcl object types</p>

<h3><a name="M3">SYNOPSIS</a></h3>

<p><b>#include &lt;tcl.h&gt;</b><br>
<b>Tcl_RegisterObjType</b>(<i>typePtr</i>)<br>
Tcl_ObjType *<br>
<b>Tcl_GetObjType</b>(<i>typeName</i>)<br>
int<br>
<b>Tcl_AppendAllObjTypes</b>(<i>interp, objPtr</i>)<br>
int<br>
<b>Tcl_ConvertToType</b>(<i>interp, objPtr, typePtr</i>)<br>
</p>

<h3><a name="M4">ARGUMENTS</a></h3>

<dl>
<dt>Tcl_ObjType <b>*typePtr</b> (in)</dt>

<dd>Points to the structure containing information about the Tcl
object type. This storage must live forever, typically by being
statically allocated.</dd>

<dt>CONST char <b>*typeName</b> (in)</dt>

<dd>The name of a Tcl object type that <b>Tcl_GetObjType</b> should
look up.</dd>

<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(in)</dt>

<dd>Interpreter to use for error reporting.</dd>

<dt>Tcl_Obj <b>*objPtr</b> (in)</dt>

<dd>For <b>Tcl_AppendAllObjTypes</b>, this points to the object
onto which it appends the name of each object type as a list
element. For <b>Tcl_ConvertToType</b>, this points to an object
that must have been the result of a previous call to <b><a href=
"../TclLib/Object.htm">Tcl_NewObj</a></b>.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

<p>The procedures in this man page manage Tcl object types. The are
used to register new object types, look up types, and force
conversions from one type to another.</p>

<p><b>Tcl_RegisterObjType</b> registers a new Tcl object type in
the table of all object types supported by Tcl. The argument
<i>typePtr</i> points to a Tcl_ObjType structure that describes the
new type by giving its name and by supplying pointers to four
procedures that implement the type. If the type table already
contains a type with the same name as in <i>typePtr</i>, it is
replaced with the new type. The Tcl_ObjType structure is described
in the section <b>THE TCL_OBJTYPE STRUCTURE</b> below.</p>

<p><b>Tcl_GetObjType</b> returns a pointer to the Tcl_ObjType with
name <i>typeName</i>. It returns NULL if no type with that name is
registered.</p>

<p><b>Tcl_AppendAllObjTypes</b> appends the name of each object
type as a list element onto the Tcl object referenced by
<i>objPtr</i>. The return value is <b>TCL_OK</b> unless there was
an error converting <i>objPtr</i> to a list object; in that case
<b>TCL_ERROR</b> is returned.</p>

<p><b>Tcl_ConvertToType</b> converts an object from one type to
another if possible. It creates a new internal representation for
<i>objPtr</i> appropriate for the target type <i>typePtr</i> and
sets its <i>typePtr</i> member to that type. Any internal
representation for <i>objPtr</i>'s old type is freed. If an error
occurs during conversion, it returns <b>TCL_ERROR</b> and leaves an
error message in the result object for <i>interp</i> unless
<i>interp</i> is NULL. Otherwise, it returns <b>TCL_OK</b>. Passing
a NULL <i>interp</i> allows this procedure to be used as a test
whether the conversion can be done (and in fact was done).</p>

<h3><a name="M6">THE TCL_OBJTYPE STRUCTURE</a></h3>

<p>Extension writers can define new object types by defining four
procedures, initializing a Tcl_ObjType structure to describe the
type, and calling <b>Tcl_RegisterObjType</b>. The
<b>Tcl_ObjType</b> structure is defined as follows:</p>

<pre>
typedef struct Tcl_ObjType {
    char *<i>name</i>;
    Tcl_FreeInternalRepProc *<i>freeIntRepProc</i>;
    Tcl_DupInternalRepProc *<i>dupIntRepProc</i>;
    Tcl_UpdateStringProc *<i>updateStringProc</i>;
    Tcl_SetFromAnyProc *<i>setFromAnyProc</i>;
} Tcl_ObjType;
</pre>

<p>The <i>name</i> member describes the name of the type, e.g.
<b>int</b>. Extension writers can look up an object type using its
name with the <b>Tcl_GetObjType</b> procedure. The remaining four
members are pointers to procedures called by the generic Tcl object
code:</p>

<p>The <i>setFromAnyProc</i> member contains the address of a
function called to create a valid internal representation from an
object's string representation.</p>

<pre>
typedef int (Tcl_SetFromAnyProc) (<a href=
"../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>, Tcl_Obj *<i>objPtr</i>);
</pre>

<p>If an internal representation can't be created from the string,
it returns <b>TCL_ERROR</b> and puts a message describing the error
in the result object for <i>interp</i> unless <i>interp</i> is
NULL. If <i>setFromAnyProc</i> is successful, it stores the new
internal representation, sets <i>objPtr</i>'s <i>typePtr</i> member
to point to <i>setFromAnyProc</i>'s <b>Tcl_ObjType</b>, and returns
<b>TCL_OK</b>. Before setting the new internal representation, the
<i>setFromAnyProc</i> must free any internal representation of
<i>objPtr</i>'s old type; it does this by calling the old type's
<i>freeIntRepProc</i> if it is not NULL. As an example, the
<i>setFromAnyProc</i> for the builtin Tcl integer type gets an
up-to-date string representation for <i>objPtr</i> by calling <b><a
href="../TclLib/StringObj.htm">Tcl_GetStringFromObj</a></b>. It
parses the string to obtain an integer and, if this succeeds,
stores the integer in <i>objPtr</i>'s internal representation and
sets <i>objPtr</i>'s <i>typePtr</i> member to point to the integer
type's Tcl_ObjType structure. Do not release <i>objPtr</i>'s old
internal representation unless you replace it with a new one or
reset the <i>typePtr</i> member to NULL.</p>

<p>The <i>updateStringProc</i> member contains the address of a
function called to create a valid string representation from an
object's internal representation.</p>

<pre>
typedef void (Tcl_UpdateStringProc) (Tcl_Obj *<i>objPtr</i>);
</pre>

<p><i>objPtr</i>'s <i>bytes</i> member is always NULL when it is
called. It must always set <i>bytes</i> non-NULL before returning.
We require the string representation's byte array to have a null
after the last byte, at offset <i>length</i>; this allows string
representations that do not contain null bytes to be treated as
conventional null character-terminated C strings. Storage for the
byte array must be allocated in the heap by <b><a href=
"../TclLib/Alloc.htm">Tcl_Alloc</a></b> or <b><a href=
"../TclLib/Alloc.htm">ckalloc</a></b>. Note that
<i>updateStringProc</i>s must allocate enough storage for the
string's bytes and the terminating null byte. The
<i>updateStringProc</i> for Tcl's builtin list type, for example,
builds an array of strings for each element object and then calls
<b><a href="../TclLib/SplitList.htm">Tcl_Merge</a></b> to construct
a string with proper Tcl list structure. It stores this string as
the list object's string representation.</p>

<p>The <i>dupIntRepProc</i> member contains the address of a
function called to copy an internal representation from one object
to another.</p>

<pre>
typedef void (Tcl_DupInternalRepProc) (Tcl_Obj *<i>srcPtr</i>, Tcl_Obj *<i>dupPtr</i>);
</pre>

<p><i>dupPtr</i>'s internal representation is made a copy of
<i>srcPtr</i>'s internal representation. Before the call,
<i>srcPtr</i>'s internal representation is valid and
<i>dupPtr</i>'s is not. <i>srcPtr</i>'s object type determines what
copying its internal representation means. For example, the
<i>dupIntRepProc</i> for the Tcl integer type simply copies an
integer. The builtin list type's <i>dupIntRepProc</i> allocates a
new array that points at the original element objects; the elements
are shared between the two lists (and their reference counts are
incremented to reflect the new references).</p>

<p>The <i>freeIntRepProc</i> member contains the address of a
function that is called when an object is freed.</p>

<pre>
typedef void (Tcl_FreeInternalRepProc) (Tcl_Obj *<i>objPtr</i>);
</pre>

<p>The <i>freeIntRepProc</i> function can deallocate the storage
for the object's internal representation and do other type-specific
processing necessary when an object is freed. For example, Tcl list
objects have an <i>internalRep.otherValuePtr</i> that points to an
array of pointers to each element in the list. The list type's
<i>freeIntRepProc</i> decrements the reference count for each
element object (since the list will no longer refer to those
objects), then deallocates the storage for the array of pointers.
The <i>freeIntRepProc</i> member can be set to NULL to indicate
that the internal representation does not require freeing.</p>

<h3><a name="M7">SEE ALSO</a></h3>

<p><b><a href="../TclLib/Object.htm">Tcl_NewObj</a></b>, <b><a
href="../TclLib/Object.htm">Tcl_DecrRefCount</a></b>, <b><a href=
"../TclLib/Object.htm">Tcl_IncrRefCount</a></b></p>

<h3><a name="M8">KEYWORDS</a></h3>

<p><a href="../Keywords/I.htm#internal representation">internal
representation</a>, <a href="../Keywords/O.htm#object">object</a>,
<a href="../Keywords/O.htm#object type">object type</a>, <a href=
"../Keywords/S.htm#string representation">string
representation</a>, <a href=
"../Keywords/T.htm#type conversion">type conversion</a></p>

<hr>
<pre>
<a href=
"../copyright.htm">Copyright</a> &copy; 1996-1997 Sun Microsystems, Inc.
<a href=
"../copyright.htm">Copyright</a> &copy; 1995-1997 Roger E. Critchlow Jr.
</pre>
</body>
</html>

