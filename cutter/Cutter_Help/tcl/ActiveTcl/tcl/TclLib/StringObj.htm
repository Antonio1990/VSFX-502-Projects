<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Library Procedures - Tcl_StringObj manual page</title>
</head>
<body>
<table width='100%' border='0' cellspacing='0' cellpadding='0'
bgcolor='EAE2BB'>
<tr>
<td><a target='_blank' href=
'http://www.ActiveState.com/Products/ActiveTcl'><img src=
'../../images/ActiveTcl.gif' border='0' align='left' height='61'
width='64'></a> </td>
<td>
<div align='center' class='heading'>ActiveTcl User Guide</div>
</td>
<td><a target='_blank' href='http://www.ActiveState.com'><img src=
'../../images/AS_logo.gif' border='0' align='right' height='48'
width='112'></a> </td>
</tr>

<tr>
<td class='lineColour' colspan='3'></td>
</tr>
</table>

<br>
<h3><a name="M2">NAME</a></h3>

<p>Tcl_NewStringObj, Tcl_NewUnicodeObj, Tcl_SetStringObj,
Tcl_SetUnicodeObj, Tcl_GetStringFromObj, Tcl_GetString,
Tcl_GetUnicodeFromObj, Tcl_GetUnicode, Tcl_GetUniChar,
Tcl_GetCharLength, Tcl_GetRange, Tcl_AppendToObj,
Tcl_AppendUnicodeToObj, Tcl_AppendStringsToObj,
Tcl_AppendStringsToObjVA, Tcl_AppendObjToObj, Tcl_SetObjLength,
Tcl_ConcatObj, Tcl_AttemptSetObjLength - manipulate Tcl objects as
strings</p>

<h3><a name="M3">SYNOPSIS</a></h3>

<p><b>#include &lt;tcl.h&gt;</b><br>
Tcl_Obj *<br>
<b>Tcl_NewStringObj</b>(<i>bytes, length</i>)<br>
Tcl_Obj *<br>
<b>Tcl_NewUnicodeObj</b>(<i>unicode, numChars</i>)<br>
void<br>
<b>Tcl_SetStringObj</b>(<i>objPtr, bytes, length</i>)<br>
void<br>
<b>Tcl_SetUnicodeObj</b>(<i>objPtr, unicode, numChars</i>)<br>
char *<br>
<b>Tcl_GetStringFromObj</b>(<i>objPtr, lengthPtr</i>)<br>
char *<br>
<b>Tcl_GetString</b>(<i>objPtr</i>)<br>
<a href="../TclLib/Utf.htm">Tcl_UniChar</a> *<br>
<b>Tcl_GetUnicodeFromObj</b>(<i>objPtr, lengthPtr</i>)<br>
<a href="../TclLib/Utf.htm">Tcl_UniChar</a> *<br>
<b>Tcl_GetUnicode</b>(<i>objPtr</i>)<br>
<a href="../TclLib/Utf.htm">Tcl_UniChar</a><br>
<b>Tcl_GetUniChar</b>(<i>objPtr, index</i>)<br>
int<br>
<b>Tcl_GetCharLength</b>(<i>objPtr</i>)<br>
Tcl_Obj *<br>
<b>Tcl_GetRange</b>(<i>objPtr, first, last</i>)<br>
void<br>
<b>Tcl_AppendToObj</b>(<i>objPtr, bytes, length</i>)<br>
void<br>
<b>Tcl_AppendUnicodeToObj</b>(<i>objPtr, unicode, numChars</i>)<br>
void<br>
<b>Tcl_AppendObjToObj</b>(<i>objPtr, appendObjPtr</i>)<br>
void<br>
<b>Tcl_AppendStringsToObj</b>(<i>objPtr, string, string, ...</i>
<b>(char *) NULL</b>)<br>
void<br>
<b>Tcl_AppendStringsToObjVA</b>(<i>objPtr, argList</i>)<br>
void<br>
<b>Tcl_SetObjLength</b>(<i>objPtr, newLength</i>)<br>
int<br>
<b>Tcl_AttemptSetObjLength</b>(<i>objPtr, newLength</i>)<br>
Tcl_Obj *<br>
<b>Tcl_ConcatObj</b>(<i>objc, objv</i>)<br>
</p>

<h3><a name="M4">ARGUMENTS</a></h3>

<dl>
<dt>CONST char <b>*bytes</b> (in)</dt>

<dd>Points to the first byte of an array of UTF-8-encoded bytes
used to set or append to a string object. This byte array should
not contain embedded null bytes unless <i>length</i> is negative.
(Applications needing null bytes should represent them as the
two-byte sequence <i>\700\600</i>, use <b><a href=
"../TclLib/Encoding.htm">Tcl_ExternalToUtf</a></b> to convert, or
<b><a href="../TclLib/ByteArrObj.htm">Tcl_NewByteArrayObj</a></b>
if the string is a collection of uninterpreted bytes.)</dd>

<dt>int <b>length</b> (in)</dt>

<dd>The number of bytes to copy from <i>bytes</i> when
initializing, setting, or appending to a string object. If
negative, all bytes up to the first null are used.</dd>

<dt>CONST <a href="../TclLib/Utf.htm">Tcl_UniChar</a>
<b>*unicode</b> (in)</dt>

<dd>Points to the first byte of an array of Unicode characters used
to set or append to a string object. This byte array may contain
embedded null characters unless <i>numChars</i> is negative.</dd>

<dt>int <b>numChars</b> (in)</dt>

<dd>The number of Unicode characters to copy from <i>unicode</i>
when initializing, setting, or appending to a string object. If
negative, all characters up to the first null character are
used.</dd>

<dt>int <b>index</b> (in)</dt>

<dd>The index of the Unicode character to return.</dd>

<dt>int <b>first</b> (in)</dt>

<dd>The index of the first Unicode character in the Unicode range
to be returned as a new object.</dd>

<dt>int <b>last</b> (in)</dt>

<dd>The index of the last Unicode character in the Unicode range to
be returned as a new object.</dd>

<dt>Tcl_Obj <b>*objPtr</b> (in/out)</dt>

<dd>Points to an object to manipulate.</dd>

<dt>Tcl_Obj <b>*appendObjPtr</b> (in)</dt>

<dd>The object to append to <i>objPtr</i> in
<b>Tcl_AppendObjToObj</b>.</dd>

<dt>int <b>*lengthPtr</b> (out)</dt>

<dd>If non-NULL, the location where <b>Tcl_GetStringFromObj</b>
will store the the length of an object's string
representation.</dd>

<dt>CONST char <b>*string</b> (in)</dt>

<dd>Null-terminated string value to append to <i>objPtr</i>.</dd>

<dt>va_list <b>argList</b> (in)</dt>

<dd>An argument list which must have been initialised using
<b>TCL_VARARGS_START</b>, and cleared using <b>va_end</b>.</dd>

<dt>int <b>newLength</b> (in)</dt>

<dd>New length for the string value of <i>objPtr</i>, not including
the final NULL character.</dd>

<dt>int <b>objc</b> (in)</dt>

<dd>The number of elements to concatenate.</dd>

<dt>Tcl_Obj <b>*objv[]</b> (in)</dt>

<dd>The array of objects to concatenate.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

<p>The procedures described in this manual entry allow Tcl objects
to be manipulated as string values. They use the internal
representation of the object to store additional information to
make the string manipulations more efficient. In particular, they
make a series of append operations efficient by allocating extra
storage space for the string so that it doesn't have to be copied
for each append. Also, indexing and length computations are
optimized because the Unicode string representation is calculated
and cached as needed. When using the <b>Tcl_Append*</b> family of
functions where the interpreter's result is the object being
appended to, it is important to call <a href=
"../TclLib/SetResult.htm">Tcl_ResetResult</a> first to ensure you
are not unintentionally appending to existing data in the result
object.</p>

<p><b>Tcl_NewStringObj</b> and <b>Tcl_SetStringObj</b> create a new
object or modify an existing object to hold a copy of the string
given by <i>bytes</i> and <i>length</i>. <b>Tcl_NewUnicodeObj</b>
and <b>Tcl_SetUnicodeObj</b> create a new object or modify an
existing object to hold a copy of the Unicode string given by
<i>unicode</i> and <i>numChars</i>. <b>Tcl_NewStringObj</b> and
<b>Tcl_NewUnicodeObj</b> return a pointer to a newly created object
with reference count zero. All four procedures set the object to
hold a copy of the specified string. <b>Tcl_SetStringObj</b> and
<b>Tcl_SetUnicodeObj</b> free any old string representation as well
as any old internal representation of the object.</p>

<p><b>Tcl_GetStringFromObj</b> and <b>Tcl_GetString</b> return an
object's string representation. This is given by the returned byte
pointer and (for <b>Tcl_GetStringFromObj</b>) length, which is
stored in <i>lengthPtr</i> if it is non-NULL. If the object's UTF
string representation is invalid (its byte pointer is NULL), the
string representation is regenerated from the object's internal
representation. The storage referenced by the returned byte pointer
is owned by the object manager. It is passed back as a writable
pointer so that extension author creating their own
<b>Tcl_ObjType</b> will be able to modify the string representation
within the <b>Tcl_UpdateStringProc</b> of their <b>Tcl_ObjType</b>.
Except for that limited purpose, the pointer returned by
<b>Tcl_GetStringFromObj</b> or <b>Tcl_GetString</b> should be
treated as read-only. It is recommended that this pointer be
assigned to a (CONST char *) variable. Even in the limited
situations where writing to this pointer is acceptable, one should
take care to respect the copy-on-write semantics required by
<b>Tcl_Obj</b>'s, with appropriate calls to <b><a href=
"../TclLib/Object.htm">Tcl_IsShared</a></b> and <b><a href=
"../TclLib/Object.htm">Tcl_DuplicateObj</a></b> prior to any
in-place modification of the string representation. The procedure
<b>Tcl_GetString</b> is used in the common case where the caller
does not need the length of the string representation.</p>

<p><b>Tcl_GetUnicodeFromObj</b> and <b>Tcl_GetUnicode</b> return an
object's value as a Unicode string. This is given by the returned
pointer and (for <b>Tcl_GetUnicodeFromObj</b>) length, which is
stored in <i>lengthPtr</i> if it is non-NULL. The storage
referenced by the returned byte pointer is owned by the object
manager and should not be modified by the caller. The procedure
<b>Tcl_GetUnicode</b> is used in the common case where the caller
does not need the length of the unicode string representation.</p>

<p><b>Tcl_GetUniChar</b> returns the <i>index</i>'th character in
the object's Unicode representation.</p>

<p><b>Tcl_GetRange</b> returns a newly created object comprised of
the characters between <i>first</i> and <i>last</i> (inclusive) in
the object's Unicode representation. If the object's Unicode
representation is invalid, the Unicode representation is
regenerated from the object's string representation.</p>

<p><b>Tcl_GetCharLength</b> returns the number of characters (as
opposed to bytes) in the string object.</p>

<p><b>Tcl_AppendToObj</b> appends the data given by <i>bytes</i>
and <i>length</i> to the string representation of the object
specified by <i>objPtr</i>. If the object has an invalid string
representation, then an attempt is made to convert <i>bytes</i> is
to the Unicode format. If the conversion is successful, then the
converted form of <i>bytes</i> is appended to the object's Unicode
representation. Otherwise, the object's Unicode representation is
invalidated and converted to the UTF format, and <i>bytes</i> is
appended to the object's new string representation.</p>

<p><b>Tcl_AppendUnicodeToObj</b> appends the Unicode string given
by <i>unicode</i> and <i>numChars</i> to the object specified by
<i>objPtr</i>. If the object has an invalid Unicode representation,
then <i>unicode</i> is converted to the UTF format and appended to
the object's string representation. Appends are optimized to handle
repeated appends relatively efficiently (it overallocates the
string or Unicode space to avoid repeated reallocations and copies
of object's string value).</p>

<p><b>Tcl_AppendObjToObj</b> is similar to <b>Tcl_AppendToObj</b>,
but it appends the string or Unicode value (whichever exists and is
best suited to be appended to <i>objPtr</i>) of <i>appendObjPtr</i>
to <i>objPtr</i>.</p>

<p><b>Tcl_AppendStringsToObj</b> is similar to
<b>Tcl_AppendToObj</b> except that it can be passed more than one
value to append and each value must be a null-terminated string
(i.e. none of the values may contain internal null characters). Any
number of <i>string</i> arguments may be provided, but the last
argument must be a NULL pointer to indicate the end of the
list.</p>

<p><b>Tcl_AppendStringsToObjVA</b> is the same as
<b>Tcl_AppendStringsToObj</b> except that instead of taking a
variable number of arguments it takes an argument list.</p>

<p>The <b>Tcl_SetObjLength</b> procedure changes the length of the
string value of its <i>objPtr</i> argument. If the <i>newLength</i>
argument is greater than the space allocated for the object's
string, then the string space is reallocated and the old value is
copied to the new space; the bytes between the old length of the
string and the new length may have arbitrary values. If the
<i>newLength</i> argument is less than the current length of the
object's string, with <i>objPtr-&gt;length</i> is reduced without
reallocating the string space; the original allocated size for the
string is recorded in the object, so that the string length can be
enlarged in a subsequent call to <b>Tcl_SetObjLength</b> without
reallocating storage. In all cases <b>Tcl_SetObjLength</b> leaves a
null character at <i>objPtr-&gt;bytes[newLength]</i>.</p>

<p><b>Tcl_AttemptSetObjLength</b> is identical in function to
<b>Tcl_SetObjLength</b> except that if sufficient memory to satisfy
the request cannot be allocated, it does not cause the Tcl
interpreter to <b><a href="../TclLib/Panic.htm">panic</a></b>.
Thus, if <i>newLength</i> is greater than the space allocated for
the object's string, and there is not enough memory available to
satisfy the request, <b>Tcl_AttemptSetObjLength</b> will take no
action and return 0 to indicate failure. If there is enough memory
to satisfy the request, <b>Tcl_AttemptSetObjLength</b> behaves just
like <b>Tcl_SetObjLength</b> and returns 1 to indicate success.</p>

<p>The <b>Tcl_ConcatObj</b> function returns a new string object
whose value is the space-separated concatenation of the string
representations of all of the objects in the <i>objv</i> array.
<b>Tcl_ConcatObj</b> eliminates leading and trailing white space as
it copies the string representations of the <i>objv</i> array to
the result. If an element of the <i>objv</i> array consists of
nothing but white space, then that object is ignored entirely. This
white-space removal was added to make the output of the <b><a href=
"../TclCmd/concat.htm">concat</a></b> command cleaner-looking.
<b>Tcl_ConcatObj</b> returns a pointer to a newly-created object
whose ref count is zero.</p>

<h3><a name="M6">SEE ALSO</a></h3>

<p><b><a href="../TclLib/Object.htm">Tcl_NewObj</a></b>, <b><a
href="../TclLib/Object.htm">Tcl_IncrRefCount</a></b>, <b><a href=
"../TclLib/Object.htm">Tcl_DecrRefCount</a></b></p>

<h3><a name="M7">KEYWORDS</a></h3>

<p><a href="../Keywords/A.htm#append">append</a>, <a href=
"../Keywords/I.htm#internal representation">internal
representation</a>, <a href="../Keywords/O.htm#object">object</a>,
<a href="../Keywords/O.htm#object type">object type</a>, <a href=
"../Keywords/S.htm#string object">string object</a>, <a href=
"../Keywords/S.htm#string type">string type</a>, <a href=
"../Keywords/S.htm#string representation">string
representation</a>, <a href="../Keywords/C.htm#concat">concat</a>,
<a href="../Keywords/C.htm#concatenate">concatenate</a>, <a href=
"../Keywords/U.htm#unicode">unicode</a></p>

<hr>
<pre>
<a href=
"../copyright.htm">Copyright</a> &copy; 1994-1997 Sun Microsystems, Inc.
<a href=
"../copyright.htm">Copyright</a> &copy; 1995-1997 Roger E. Critchlow Jr.
</pre>
</body>
</html>

