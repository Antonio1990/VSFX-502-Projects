<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Library Procedures - Tcl_TraceCommand manual
page</title>
</head>
<body>
<table width='100%' border='0' cellspacing='0' cellpadding='0'
bgcolor='EAE2BB'>
<tr>
<td><a target='_blank' href=
'http://www.ActiveState.com/Products/ActiveTcl'><img src=
'../../images/ActiveTcl.gif' border='0' align='left' height='61'
width='64'></a> </td>
<td>
<div align='center' class='heading'>ActiveTcl User Guide</div>
</td>
<td><a target='_blank' href='http://www.ActiveState.com'><img src=
'../../images/AS_logo.gif' border='0' align='right' height='48'
width='112'></a> </td>
</tr>

<tr>
<td class='lineColour' colspan='3'></td>
</tr>
</table>

<br>
<dl>
<dd><a href="TraceCmd.htm#M2" name="L663">NAME</a> 

<dl>
<dd>Tcl_CommandTraceInfo, Tcl_TraceCommand, Tcl_UntraceCommand -
monitor renames and deletes of a command</dd>
</dl>
</dd>

<dd><a href="TraceCmd.htm#M3" name="L664">SYNOPSIS</a></dd>

<dd><a href="TraceCmd.htm#M4" name="L665">ARGUMENTS</a></dd>

<dd><a href="TraceCmd.htm#M5" name="L666">DESCRIPTION</a> 

<dl>
<dd><a href="TraceCmd.htm#M6" name=
"L667"><b>TCL_TRACE_RENAME</b></a></dd>

<dd><a href="TraceCmd.htm#M7" name=
"L668"><b>TCL_TRACE_DELETE</b></a></dd>
</dl>
</dd>

<dd><a href="TraceCmd.htm#M8" name="L669">CALLING COMMANDS DURING
TRACES</a></dd>

<dd><a href="TraceCmd.htm#M9" name="L670">MULTIPLE TRACES</a></dd>

<dd><a href="TraceCmd.htm#M10" name="L671">TCL_TRACE_DESTROYED
FLAG</a></dd>

<dd><a href="TraceCmd.htm#M11" name=
"L672">TCL_INTERP_DESTROYED</a></dd>

<dd><a href="TraceCmd.htm#M12" name="L673">BUGS</a></dd>

<dd><a href="TraceCmd.htm#M13" name="L674">KEYWORDS</a></dd>
</dl>

<hr>
<h3><a name="M2">NAME</a></h3>

<p>Tcl_CommandTraceInfo, Tcl_TraceCommand, Tcl_UntraceCommand -
monitor renames and deletes of a command</p>

<h3><a name="M3">SYNOPSIS</a></h3>

<p><b>#include &lt;tcl.h&gt;</b><br>
ClientData<br>
<b>Tcl_CommandTraceInfo(</b><i>interp, cmdName, flags, proc,
prevClientData</i><b>)</b><br>
int<br>
<b>Tcl_TraceCommand(</b><i>interp, cmdName, flags, proc,
clientData</i><b>)</b><br>
void<br>
<b>Tcl_UntraceCommand(</b><i>interp, cmdName, flags, proc,
clientData</i><b>)</b><br>
</p>

<h3><a name="M4">ARGUMENTS</a></h3>

<dl>
<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(in)</dt>

<dd>Interpreter containing the command.</dd>

<dt>CONST char <b>*cmdName</b> (in)</dt>

<dd>Name of command.</dd>

<dt>int <b>flags</b> (in)</dt>

<dd>OR-ed collection of the value TCL_TRACE_RENAME and
TCL_TRACE_DELETE.</dd>

<dt>Tcl_CommandTraceProc <b>*proc</b> (in)</dt>

<dd>Procedure to call when specified operations occur to
<i>cmdName</i>.</dd>

<dt>ClientData <b>clientData</b> (in)</dt>

<dd>Arbitrary argument to pass to <i>proc</i>.</dd>

<dt>ClientData <b>prevClientData</b> (in)</dt>

<dd>If non-NULL, gives last value returned by
<b>Tcl_CommandTraceInfo</b>, so this call will return information
about next trace. If NULL, this call will return information about
first trace.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

<p><b>Tcl_TraceCommand</b> allows a C procedure to monitor
operations performed on a Tcl command, so that the C procedure is
invoked whenever the command is renamed or deleted. If the trace is
created successfully then <b>Tcl_TraceCommand</b> returns TCL_OK.
If an error occurred (e.g. <i>cmdName</i> specifies a non-existent
command) then TCL_ERROR is returned and an error message is left in
the interpreter's result.</p>

<p>The <i>flags</i> argument to <b>Tcl_TraceCommand</b> indicates
when the trace procedure is to be invoked. It consists of an OR-ed
combination of any of the following values:</p>

<dl>
<dt><a name="M6"><b>TCL_TRACE_RENAME</b></a></dt>

<dd>Invoke <i>proc</i> whenever the command is renamed.</dd>

<dt><a name="M7"><b>TCL_TRACE_DELETE</b></a></dt>

<dd>Invoke <i>proc</i> when the command is deleted.</dd>
</dl>

<p>Whenever one of the specified operations occurs to the command,
<i>proc</i> will be invoked. It should have arguments and result
that match the type <b>Tcl_CommandTraceProc</b>:</p>

<pre>
typedef void Tcl_CommandTraceProc(
    ClientData <i>clientData</i>,
        <a href=
"../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>,
    CONST char *<i>oldName</i>,
    CONST char *<i>newName</i>,
        int <i>flags</i>);
</pre>

<p>The <i>clientData</i> and <i>interp</i> parameters will have the
same values as those passed to <b>Tcl_TraceCommand</b> when the
trace was created. <i>ClientData</i> typically points to an
application-specific data structure that describes what to do when
<i>proc</i> is invoked. <i>OldName</i> gives the name of the
command being renamed, and <i>newName</i> gives the name that the
command is being renamed to (or an empty string or NULL when the
command is being deleted.) <i>Flags</i> is an OR-ed combination of
bits potentially providing several pieces of information. One of
the bits TCL_TRACE_RENAME and TCL_TRACE_DELETE will be set in
<i>flags</i> to indicate which operation is being performed on the
command. The bit TCL_TRACE_DESTROYED will be set in <i>flags</i> if
the trace is about to be destroyed; this information may be useful
to <i>proc</i> so that it can clean up its own internal data
structures (see the section TCL_TRACE_DESTROYED below for more
details). Lastly, the bit TCL_INTERP_DESTROYED will be set if the
entire interpreter is being destroyed. When this bit is set,
<i>proc</i> must be especially careful in the things it does (see
the section TCL_INTERP_DESTROYED below).</p>

<p><b>Tcl_UntraceCommand</b> may be used to remove a trace. If the
command specified by <i>interp</i>, <i>cmdName</i>, and
<i>flags</i> has a trace set with <i>flags</i>, <i>proc</i>, and
<i>clientData</i>, then the corresponding trace is removed. If no
such trace exists, then the call to <b>Tcl_UntraceCommand</b> has
no effect. The same bits are valid for <i>flags</i> as for calls to
<b>Tcl_TraceCommand</b>.</p>

<p><b>Tcl_CommandTraceInfo</b> may be used to retrieve information
about traces set on a given command. The return value from
<b>Tcl_CommandTraceInfo</b> is the <i>clientData</i> associated
with a particular trace. The trace must be on the command specified
by the <i>interp</i>, <i>cmdName</i>, and <i>flags</i> arguments
(note that currently the flags are ignored; <i>flags</i> should be
set to 0 for future compatibility) and its trace procedure must the
same as the <i>proc</i> argument. If the <i>prevClientData</i>
argument is NULL then the return value corresponds to the first
(most recently created) matching trace, or NULL if there are no
matching traces. If the <i>prevClientData</i> argument isn't NULL,
then it should be the return value from a previous call to
<b>Tcl_CommandTraceInfo</b>. In this case, the new return value
will correspond to the next matching trace after the one whose
<i>clientData</i> matches <i>prevClientData</i>, or NULL if no
trace matches <i>prevClientData</i> or if there are no more
matching traces after it. This mechanism makes it possible to step
through all of the traces for a given command that have the same
<i>proc</i>.</p>

<h3><a name="M8">CALLING COMMANDS DURING TRACES</a></h3>

<p>During rename traces, the command being renamed is visible with
both names simultaneously, and the command still exists during
delete traces (if TCL_INTERP_DESTROYED is not set). However, there
is no mechanism for signaling that an error occurred in a trace
procedure, so great care should be taken that errors do not get
silently lost.</p>

<h3><a name="M9">MULTIPLE TRACES</a></h3>

<p>It is possible for multiple traces to exist on the same command.
When this happens, all of the trace procedures will be invoked on
each access, in order from most-recently-created to
least-recently-created. Attempts to delete the command during a
delete trace will fail silently, since the command is already
scheduled for deletion anyway. If the command being renamed is
renamed by one of its rename traces, that renaming takes precedence
over the one that triggered the trace and the collection of traces
will not be reexecuted; if several traces rename the command, the
last renaming takes precedence.</p>

<h3><a name="M10">TCL_TRACE_DESTROYED FLAG</a></h3>

<p>In a delete callback to <i>proc</i>, the TCL_TRACE_DESTROYED bit
is set in <i>flags</i>.</p>

<h3><a name="M11">TCL_INTERP_DESTROYED</a></h3>

<p>When an interpreter is destroyed, unset traces are called for
all of its commands. The TCL_INTERP_DESTROYED bit will be set in
the <i>flags</i> argument passed to the trace procedures. Trace
procedures must be extremely careful in what they do if the
TCL_INTERP_DESTROYED bit is set. It is not safe for the procedures
to invoke any Tcl procedures on the interpreter, since its state is
partially deleted. All that trace procedures should do under these
circumstances is to clean up and free their own internal data
structures.</p>

<h3><a name="M12">BUGS</a></h3>

<p>Tcl doesn't do any error checking to prevent trace procedures
from misusing the interpreter during traces with
TCL_INTERP_DESTROYED set.</p>

<h3><a name="M13">KEYWORDS</a></h3>

<p><a href="../Keywords/C.htm#clientData">clientData</a>, <a href=
"../Keywords/T.htm#trace">trace</a>, <a href=
"../Keywords/C.htm#command">command</a></p>

<hr>
<pre>
<a href=
"../copyright.htm">Copyright</a> &copy; 2002 Donal K. Fellows
<a href=
"../copyright.htm">Copyright</a> &copy; 1995-1997 Roger E. Critchlow Jr.
</pre>
</body>
</html>

