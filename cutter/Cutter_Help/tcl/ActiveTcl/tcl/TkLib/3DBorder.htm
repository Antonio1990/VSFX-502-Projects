<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tk Library Procedures - Tk_Alloc3DBorderFromObj manual
page</title>
</head>
<body>
<table width='100%' border='0' cellspacing='0' cellpadding='0'
bgcolor='EAE2BB'>
<tr>
<td><a target='_blank' href=
'http://www.ActiveState.com/Products/ActiveTcl'><img src=
'../../images/ActiveTcl.gif' border='0' align='left' height='61'
width='64'></a> </td>
<td>
<div align='center' class='heading'>ActiveTcl User Guide</div>
</td>
<td><a target='_blank' href='http://www.ActiveState.com'><img src=
'../../images/AS_logo.gif' border='0' align='right' height='48'
width='112'></a> </td>
</tr>

<tr>
<td class='lineColour' colspan='3'></td>
</tr>
</table>

<br>
<h3><a name="M2">NAME</a></h3>

<p>Tk_Alloc3DBorderFromObj, Tk_Get3DBorder, Tk_Get3DBorderFromObj,
Tk_Draw3DRectangle, Tk_Fill3DRectangle, Tk_Draw3DPolygon,
Tk_Fill3DPolygon, Tk_3DVerticalBevel, Tk_3DHorizontalBevel,
Tk_SetBackgroundFromBorder, Tk_NameOf3DBorder, Tk_3DBorderColor,
Tk_3DBorderGC, Tk_Free3DBorderFromObj, Tk_Free3DBorder - draw
borders with three-dimensional appearance</p>

<h3><a name="M3">SYNOPSIS</a></h3>

<p><b>#include &lt;tk.h&gt;</b><br>
Tk_3DBorder<br>
<b>Tk_Alloc3DBorderFromObj(</b><i>interp, tkwin,
objPtr</i><b>)</b><br>
Tk_3DBorder<br>
<b>Tk_Get3DBorder(</b><i>interp, tkwin, colorName</i><b>)</b><br>
Tk_3DBorder<br>
<b>Tk_Get3DBorderFromObj(</b><i>tkwin, objPtr</i><b>)</b><br>
void<br>
<b>Tk_Draw3DRectangle(</b><i>tkwin, drawable, border, x, y, width,
height, borderWidth, relief</i><b>)</b><br>
void<br>
<b>Tk_Fill3DRectangle(</b><i>tkwin, drawable, border, x, y, width,
height, borderWidth, relief</i><b>)</b><br>
void<br>
<b>Tk_Draw3DPolygon(</b><i>tkwin, drawable, border, pointPtr,
numPoints, polyBorderWidth, leftRelief</i><b>)</b><br>
void<br>
<b>Tk_Fill3DPolygon(</b><i>tkwin, drawable, border, pointPtr,
numPoints, polyBorderWidth, leftRelief</i><b>)</b><br>
void<br>
<b>Tk_3DVerticalBevel</b>(<i>tkwin, drawable, border, x, y, width,
height, leftBevel, relief</i><b>)</b><br>
void<br>
<b>Tk_3DHorizontalBevel</b>(<i>tkwin, drawable, border, x, y,
width, height, leftIn, rightIn, topBevel, relief</i><b>)</b><br>
void<br>
<b>Tk_SetBackgroundFromBorder(</b><i>tkwin, border</i><b>)</b><br>
CONST char *<br>
<b>Tk_NameOf3DBorder(</b><i>border</i><b>)</b><br>
XColor *<br>
<b>Tk_3DBorderColor(</b><i>border</i><b>)</b><br>
GC *<br>
<b>Tk_3DBorderGC(</b><i>tkwin, border, which</i><b>)</b><br>
<b>Tk_Free3DBorderFromObj(</b><i>tkwin, objPtr</i><b>)</b><br>
<b>Tk_Free3DBorder(</b><i>border</i><b>)</b><br>
</p>

<h3><a name="M4">ARGUMENTS</a></h3>

<dl>
<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(in)</dt>

<dd>Interpreter to use for error reporting.</dd>

<dt>Tk_Window <b>tkwin</b> (in)</dt>

<dd>Token for window (for all procedures except
<b>Tk_Get3DBorder</b>, must be the window for which the border was
allocated).</dd>

<dt>Tcl_Obj <b>*objPtr</b> (in)</dt>

<dd>Pointer to object whose value describes color corresponding to
background (flat areas). Illuminated edges will be brighter than
this and shadowed edges will be darker than this.</dd>

<dt>char <b>*colorName</b> (in)</dt>

<dd>Same as <i>objPtr</i> except value is supplied as a string
rather than an object.</dd>

<dt>Drawable <b>drawable</b> (in)</dt>

<dd>X token for window or pixmap; indicates where graphics are to
be drawn. Must either be the X window for <i>tkwin</i> or a pixmap
with the same screen and depth as <i>tkwin</i>.</dd>

<dt>Tk_3DBorder <b>border</b> (in)</dt>

<dd>Token for border previously allocated in call to
<b>Tk_Get3DBorder</b>.</dd>

<dt>int <b>x</b> (in)</dt>

<dd>X-coordinate of upper-left corner of rectangle describing
border or bevel, in pixels.</dd>

<dt>int <b>y</b> (in)</dt>

<dd>Y-coordinate of upper-left corner of rectangle describing
border or bevel, in pixels.</dd>

<dt>int <b>width</b> (in)</dt>

<dd>Width of rectangle describing border or bevel, in pixels.</dd>

<dt>int <b>height</b> (in)</dt>

<dd>Height of rectangle describing border or bevel, in pixels.</dd>

<dt>int <b>borderWidth</b> (in)</dt>

<dd>Width of border in pixels. Positive means border is inside
rectangle given by <i>x</i>, <i>y</i>, <i>width</i>, <i>height</i>,
negative means border is outside rectangle.</dd>

<dt>int <b>relief</b> (in)</dt>

<dd>Indicates 3-D position of interior of object relative to
exterior; should be TK_RELIEF_RAISED, TK_RELIEF_SUNKEN,
TK_RELIEF_GROOVE, TK_RELIEF_SOLID, or TK_RELIEF_RIDGE (may also be
TK_RELIEF_FLAT for <b>Tk_Fill3DRectangle</b>).</dd>

<dt>XPoint <b>*pointPtr</b> (in)</dt>

<dd>Pointer to array of points describing the set of vertices in a
polygon. The polygon need not be closed (it will be closed
automatically if it isn't).</dd>

<dt>int <b>numPoints</b> (in)</dt>

<dd>Number of points at <i>*pointPtr</i>.</dd>

<dt>int <b>polyBorderWidth</b> (in)</dt>

<dd>Width of border in pixels. If positive, border is drawn to left
of trajectory given by <i>pointPtr</i>; if negative, border is
drawn to right of trajectory. If <i>leftRelief</i> is
TK_RELIEF_GROOVE or TK_RELIEF_RIDGE then the border is centered on
the trajectory.</dd>

<dt>int <b>leftRelief</b> (in)</dt>

<dd>Height of left side of polygon's path relative to right.
TK_RELIEF_RAISED means left side should appear higher and
TK_RELIEF_SUNKEN means right side should appear higher;
TK_RELIEF_GROOVE and TK_RELIEF_RIDGE mean the obvious things. For
<b>Tk_Fill3DPolygon</b>, TK_RELIEF_FLAT may also be specified to
indicate no difference in height.</dd>

<dt>int <b>leftBevel</b> (in)</dt>

<dd>Non-zero means this bevel forms the left side of the object;
zero means it forms the right side.</dd>

<dt>int <b>leftIn</b> (in)</dt>

<dd>Non-zero means that the left edge of the horizontal bevel
angles in, so that the bottom of the edge is farther to the right
than the top. Zero means the edge angles out, so that the bottom is
farther to the left than the top.</dd>

<dt>int <b>rightIn</b> (in)</dt>

<dd>Non-zero means that the right edge of the horizontal bevel
angles in, so that the bottom of the edge is farther to the left
than the top. Zero means the edge angles out, so that the bottom is
farther to the right than the top.</dd>

<dt>int <b>topBevel</b> (in)</dt>

<dd>Non-zero means this bevel forms the top side of the object;
zero means it forms the bottom side.</dd>

<dt>int <b>which</b> (in)</dt>

<dd>Specifies which of the border's graphics contexts is desired.
Must be TK_3D_FLAT_GC, TK_3D_LIGHT_GC, or TK_3D_DARK_GC.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

<p>These procedures provide facilities for drawing window borders
in a way that produces a three-dimensional appearance.
<b>Tk_Alloc3DBorderFromObj</b> allocates colors and Pixmaps needed
to draw a border in the window given by the <i>tkwin</i> argument.
The value of <i>objPtr</i> is a standard Tk color name that
determines the border colors. The color indicated by <i>objPtr</i>
will not actually be used in the border; it indicates the
background color for the window (i.e. a color for flat surfaces).
The illuminated portions of the border will appear brighter than
indicated by <i>objPtr</i>, and the shadowed portions of the border
will appear darker than <i>objPtr</i>.</p>

<p><b>Tk_Alloc3DBorderFromObj</b> returns a token that may be used
in later calls to <b>Tk_Draw3DRectangle</b>. If an error occurs in
allocating information for the border (e.g. a bogus color name was
given) then NULL is returned and an error message is left in
<i>interp-&gt;result</i>. If it returns successfully,
<b>Tk_Alloc3DBorderFromObj</b> caches information about the return
value in <i>objPtr</i>, which speeds up future calls to
<b>Tk_Alloc3DBorderFromObj</b> with the same <i>objPtr</i> and
<i>tkwin</i>.</p>

<p><b>Tk_Get3DBorder</b> is identical to
<b>Tk_Alloc3DBorderFromObj</b> except that the color is specified
with a string instead of an object. This prevents
<b>Tk_Get3DBorder</b> from caching the return value, so
<b>Tk_Get3DBorder</b> is less efficient than
<b>Tk_Alloc3DBorderFromObj</b>.</p>

<p><b>Tk_Get3DBorderFromObj</b> returns the token for an existing
border, given the window and color name used to create the border.
<b>Tk_Get3DBorderFromObj</b> doesn't actually create the border; it
must already have been created with a previous call to
<b>Tk_Alloc3DBorderFromObj</b> or <b>Tk_Get3DBorder</b>. The return
value is cached in <i>objPtr</i>, which speeds up future calls to
<b>Tk_Get3DBorderFromObj</b> with the same <i>objPtr</i> and
<i>tkwin</i>.</p>

<p>Once a border structure has been created,
<b>Tk_Draw3DRectangle</b> may be invoked to draw the border. The
<i>tkwin</i> argument specifies the window for which the border was
allocated, and <i>drawable</i> specifies a window or pixmap in
which the border is to be drawn. <i>Drawable</i> need not refer to
the same window as <i>tkwin</i>, but it must refer to a compatible
pixmap or window: one associated with the same screen and with the
same depth as <i>tkwin</i>. The <i>x</i>, <i>y</i>, <i>width</i>,
and <i>height</i> arguments define the bounding box of the border
region within <i>drawable</i> (usually <i>x</i> and <i>y</i> are
zero and <i>width</i> and <i>height</i> are the dimensions of the
window), and <i>borderWidth</i> specifies the number of pixels
actually occupied by the border. The <i>relief</i> argument
indicates which of several three-dimensional effects is desired:
TK_RELIEF_RAISED means that the interior of the rectangle should
appear raised relative to the exterior of the rectangle, and
TK_RELIEF_SUNKEN means that the interior should appear depressed.
TK_RELIEF_GROOVE and TK_RELIEF_RIDGE mean that there should appear
to be a groove or ridge around the exterior of the rectangle.</p>

<p><b>Tk_Fill3DRectangle</b> is somewhat like
<b>Tk_Draw3DRectangle</b> except that it first fills the
rectangular area with the background color (one corresponding to
the color used to create <i>border</i>). Then it calls
<b>Tk_Draw3DRectangle</b> to draw a border just inside the outer
edge of the rectangular area. The argument <i>relief</i> indicates
the desired effect (TK_RELIEF_FLAT means no border should be drawn;
all that happens is to fill the rectangle with the background
color).</p>

<p>The procedure <b>Tk_Draw3DPolygon</b> may be used to draw more
complex shapes with a three-dimensional appearance. The
<i>pointPtr</i> and <i>numPoints</i> arguments define a trajectory,
<i>polyBorderWidth</i> indicates how wide the border should be (and
on which side of the trajectory to draw it), and <i>leftRelief</i>
indicates which side of the trajectory should appear raised.
<b>Tk_Draw3DPolygon</b> draws a border around the given trajectory
using the colors from <i>border</i> to produce a three-dimensional
appearance. If the trajectory is non-self-intersecting, the
appearance will be a raised or sunken polygon shape. The trajectory
may be self-intersecting, although it's not clear how useful this
is.</p>

<p><b>Tk_Fill3DPolygon</b> is to <b>Tk_Draw3DPolygon</b> what
<b>Tk_Fill3DRectangle</b> is to <b>Tk_Draw3DRectangle</b>: it fills
the polygonal area with the background color from <i>border</i>,
then calls <b>Tk_Draw3DPolygon</b> to draw a border around the area
(unless <i>leftRelief</i> is TK_RELIEF_FLAT; in this case no border
is drawn).</p>

<p>The procedures <b>Tk_3DVerticalBevel</b> and
<b>Tk_3DHorizontalBevel</b> provide lower-level drawing primitives
that are used by procedures such as <b>Tk_Draw3DRectangle</b>.
These procedures are also useful in their own right for drawing
rectilinear border shapes. <b>Tk_3DVerticalBevel</b> draws a
vertical beveled edge, such as the left or right side of a
rectangle, and <b>Tk_3DHorizontalBevel</b> draws a horizontal
beveled edge, such as the top or bottom of a rectangle. Each
procedure takes <i>x</i>, <i>y</i>, <i>width</i>, and <i>height</i>
arguments that describe the rectangular area of the beveled edge
(e.g., <i>width</i> is the border width for
<b>Tk_3DVerticalBevel</b>). The <i>leftBorder</i> and
<i>topBorder</i> arguments indicate the position of the border
relative to the ``inside'' of the object, and <i>relief</i>
indicates the relief of the inside of the object relative to the
outside. <b>Tk_3DVerticalBevel</b> just draws a rectangular region.
<b>Tk_3DHorizontalBevel</b> draws a trapezoidal region to generate
mitered corners; it should be called after
<b>Tk_3DVerticalBevel</b> (otherwise <b>Tk_3DVerticalBevel</b> will
overwrite the mitering in the corner). The <i>leftIn</i> and
<i>rightIn</i> arguments to <b>Tk_3DHorizontalBevel</b> describe
the mitering at the corners; a value of 1 means that the bottom
edge of the trapezoid will be shorter than the top, 0 means it will
be longer. For example, to draw a rectangular border the top bevel
should be drawn with 1 for both <i>leftIn</i> and <i>rightIn</i>,
and the bottom bevel should be drawn with 0 for both arguments.</p>

<p>The procedure <b>Tk_SetBackgroundFromBorder</b> will modify the
background pixel and/or pixmap of <i>tkwin</i> to produce a result
compatible with <i>border</i>. For color displays, the resulting
background will just be the color specified when <i>border</i> was
created; for monochrome displays, the resulting background will be
a light stipple pattern, in order to distinguish the background
from the illuminated portion of the border.</p>

<p>Given a token for a border, the procedure
<b>Tk_NameOf3DBorder</b> will return the color name that was used
to create the border.</p>

<p>The procedure <b>Tk_3DBorderColor</b> returns the XColor
structure that will be used for flat surfaces drawn for its
<i>border</i> argument by procedures like
<b>Tk_Fill3DRectangle</b>. The return value corresponds to the
color name that was used to create the border. The XColor, and its
associated pixel value, will remain allocated as long as
<i>border</i> exists.</p>

<p>The procedure <b>Tk_3DBorderGC</b> returns one of the X graphics
contexts that are used to draw the border. The argument
<i>which</i> selects which one of the three possible GC's:
TK_3D_FLAT_GC returns the context used for flat surfaces,
TK_3D_LIGHT_GC returns the context for light shadows, and
TK_3D_DARK_GC returns the context for dark shadows.</p>

<p>When a border is no longer needed, <b>Tk_Free3DBorderFromObj</b>
or <b>Tk_Free3DBorder</b> should be called to release the resources
associated with it. For <b>Tk_Free3DBorderFromObj</b> the border to
release is specified with the window and color name used to create
the border; for <b>Tk_Free3DBorder</b> the border to release is
specified with the Tk_3DBorder token for the border. There should
be exactly one call to <b>Tk_Free3DBorderFromObj</b> or
<b>Tk_Free3DBorder</b> for each call to
<b>Tk_Alloc3DBorderFromObj</b> or <b>Tk_Get3DBorder</b>.</p>

<h3><a name="M6">KEYWORDS</a></h3>

<p><a href="../Keywords/3.htm#3D">3D</a>, <a href=
"../Keywords/B.htm#background">background</a>, <a href=
"../Keywords/B.htm#border">border</a>, <a href=
"../Keywords/C.htm#color">color</a>, <a href=
"../Keywords/D.htm#depressed">depressed</a>, <a href=
"../Keywords/I.htm#illumination">illumination</a>, <a href=
"../Keywords/O.htm#object">object</a>, <a href=
"../Keywords/P.htm#polygon">polygon</a>, <a href=
"../Keywords/R.htm#raised">raised</a>, <a href=
"../Keywords/S.htm#shadow">shadow</a>, <a href=
"../Keywords/T.htm#three-dimensional effect">three-dimensional
effect</a></p>

<hr>
<pre>
<a href=
"../copyright.htm">Copyright</a> &copy; 1990-1993 The Regents of the University of California.
<a href=
"../copyright.htm">Copyright</a> &copy; 1994-1998 Sun Microsystems, Inc.
<a href=
"../copyright.htm">Copyright</a> &copy; 1995-1997 Roger E. Critchlow Jr.
</pre>
</body>
</html>

