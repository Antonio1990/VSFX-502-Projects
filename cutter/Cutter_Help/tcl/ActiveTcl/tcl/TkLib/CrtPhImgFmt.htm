<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tk Library Procedures - Tk_CreatePhotoImageFormat manual
page</title>
</head>
<body>
<table width='100%' border='0' cellspacing='0' cellpadding='0'
bgcolor='EAE2BB'>
<tr>
<td><a target='_blank' href=
'http://www.ActiveState.com/Products/ActiveTcl'><img src=
'../../images/ActiveTcl.gif' border='0' align='left' height='61'
width='64'></a> </td>
<td>
<div align='center' class='heading'>ActiveTcl User Guide</div>
</td>
<td><a target='_blank' href='http://www.ActiveState.com'><img src=
'../../images/AS_logo.gif' border='0' align='right' height='48'
width='112'></a> </td>
</tr>

<tr>
<td class='lineColour' colspan='3'></td>
</tr>
</table>

<br>
<dl>
<dd><a href="CrtPhImgFmt.htm#M2" name="L154">NAME</a> 

<dl>
<dd>Tk_CreatePhotoImageFormat - define new file format for photo
images</dd>
</dl>
</dd>

<dd><a href="CrtPhImgFmt.htm#M3" name="L155">SYNOPSIS</a></dd>

<dd><a href="CrtPhImgFmt.htm#M4" name="L156">ARGUMENTS</a></dd>

<dd><a href="CrtPhImgFmt.htm#M5" name="L157">DESCRIPTION</a></dd>

<dd><a href="CrtPhImgFmt.htm#M6" name="L158">PORTABILITY</a></dd>

<dd><a href="CrtPhImgFmt.htm#M7" name="L159">NAME</a></dd>

<dd><a href="CrtPhImgFmt.htm#M8" name="L160">FILEMATCHPROC</a></dd>

<dd><a href="CrtPhImgFmt.htm#M9" name=
"L161">STRINGMATCHPROC</a></dd>

<dd><a href="CrtPhImgFmt.htm#M10" name="L162">FILEREADPROC</a></dd>

<dd><a href="CrtPhImgFmt.htm#M11" name=
"L163">STRINGREADPROC</a></dd>

<dd><a href="CrtPhImgFmt.htm#M12" name=
"L164">FILEWRITEPROC</a></dd>

<dd><a href="CrtPhImgFmt.htm#M13" name=
"L165">STRINGWRITEPROC</a></dd>

<dd><a href="CrtPhImgFmt.htm#M14" name="L166">SEE ALSO</a></dd>

<dd><a href="CrtPhImgFmt.htm#M15" name="L167">KEYWORDS</a></dd>
</dl>

<hr>
<h3><a name="M2">NAME</a></h3>

<p>Tk_CreatePhotoImageFormat - define new file format for photo
images</p>

<h3><a name="M3">SYNOPSIS</a></h3>

<p><b>#include &lt;tk.h&gt;</b><br>
<b>Tk_CreatePhotoImageFormat</b>(<i>formatPtr</i>)<br>
</p>

<h3><a name="M4">ARGUMENTS</a></h3>

<dl>
<dt>Tk_PhotoImageFormat <b>*formatPtr</b> (in)</dt>

<dd>Structure that defines the new file format.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

<p><b>Tk_CreatePhotoImageFormat</b> is invoked to define a new file
format for image data for use with photo images. The code that
implements an image file format is called an image file format
handler, or handler for short. The photo image code maintains a
list of handlers that can be used to read and write data to or from
a file. Some handlers may also support reading image data from a
string or converting image data to a string format. The user can
specify which handler to use with the <b>-format</b> image
configuration option or the <b>-format</b> option to the <b><a
href="../TclCmd/read.htm">read</a></b> and <b>write</b> photo image
subcommands.</p>

<p>An image file format handler consists of a collection of
procedures plus a Tk_PhotoImageFormat structure, which contains the
name of the image file format and pointers to six procedures
provided by the handler to deal with files and strings in this
format. The Tk_PhotoImageFormat structure contains the following
fields:</p>

<pre>
typedef struct Tk_PhotoImageFormat {
    char *<i>name</i>;
    Tk_ImageFileMatchProc *<i>fileMatchProc</i>;
    Tk_ImageStringMatchProc *<i>stringMatchProc</i>;
    Tk_ImageFileReadProc *<i>fileReadProc</i>;
    Tk_ImageStringReadProc *<i>stringReadProc</i>;
    Tk_ImageFileWriteProc *<i>fileWriteProc</i>;
    Tk_ImageStringWriteProc *<i>stringWriteProc</i>;
} Tk_PhotoImageFormat;
</pre>

<p>The handler need not provide implementations of all six
procedures. For example, the procedures that handle string data
would not be provided for a format in which the image data are
stored in binary, and could therefore contain null characters. If
any procedure is not implemented, the corresponding pointer in the
Tk_PhotoImageFormat structure should be set to NULL. The handler
must provide the <i>fileMatchProc</i> procedure if it provides the
<i>fileReadProc</i> procedure, and the <i>stringMatchProc</i>
procedure if it provides the <i>stringReadProc</i> procedure.</p>

<h3><a name="M6">PORTABILITY</a></h3>

<p>In Tk 8.2 and earlier, a different interface was used. Tk 8.3
will still support the old format handlers if the format name is in
upper case. If you still want to compile old format handlers with
Tk8.3, use the flag -DUSE_OLD_IMAGE. This will restore all function
prototypes to match the pre-8.3 situation.</p>

<h3><a name="M7">NAME</a></h3>

<p><i>formatPtr-&gt;name</i> provides a name for the image type.
Once <b>Tk_CreatePhotoImageFormat</b> returns, this name may be
used in the <b>-format</b> photo image configuration and subcommand
option. The manual page for the photo image (photo(n)) describes
how image file formats are chosen based on their names and the
value given to the <b>-format</b> option. For new format handlers,
the name should be in lower case. Pre-8.3 format handlers are
assumed to be in upper case.</p>

<h3><a name="M8">FILEMATCHPROC</a></h3>

<p><i>formatPtr-&gt;fileMatchProc</i> provides the address of a
procedure for Tk to call when it is searching for an image file
format handler suitable for reading data in a given file.
<i>formatPtr-&gt;fileMatchProc</i> must match the following
prototype:</p>

<pre>
typedef int Tk_ImageFileMatchProc(
    Tcl_Channel <i>chan</i>,
    CONST char *<i>fileName</i>,
    Tcl_Obj *<i>format</i>,
    int *<i>widthPtr</i>,
    int *<i>heightPtr</i>,
    <a href="../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>);
</pre>

<p>The <i>fileName</i> argument is the name of the file containing
the image data, which is open for reading as <i>chan</i>. The
<i>format</i> argument contains the value given for the
<b>-format</b> option, or NULL if the option was not specified. If
the data in the file appears to be in the format supported by this
handler, the <i>formatPtr-&gt;fileMatchProc</i> procedure should
store the width and height of the image in *<i>widthPtr</i> and
*<i>heightPtr</i> respectively, and return 1. Otherwise it should
return 0.</p>

<h3><a name="M9">STRINGMATCHPROC</a></h3>

<p><i>formatPtr-&gt;stringMatchProc</i> provides the address of a
procedure for Tk to call when it is searching for an image file
format handler for suitable for reading data from a given string.
<i>formatPtr-&gt;stringMatchProc</i> must match the following
prototype:</p>

<pre>
typedef int Tk_ImageStringMatchProc(
    Tcl_Obj *<i>data</i>,
    Tcl_Obj *<i>format</i>,
    int *<i>widthPtr</i>,
    int *<i>heightPtr</i>,
    <a href="../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>);
</pre>

<p>The <i>data</i> argument points to the object containing the
image data. The <i>format</i> argument contains the value given for
the <b>-format</b> option, or NULL if the option was not specified.
If the data in the string appears to be in the format supported by
this handler, the <i>formatPtr-&gt;stringMatchProc</i> procedure
should store the width and height of the image in *<i>widthPtr</i>
and *<i>heightPtr</i> respectively, and return 1. Otherwise it
should return 0.</p>

<h3><a name="M10">FILEREADPROC</a></h3>

<p><i>formatPtr-&gt;fileReadProc</i> provides the address of a
procedure for Tk to call to read data from an image file into a
photo image. <i>formatPtr-&gt;fileReadProc</i> must match the
following prototype:</p>

<pre>
typedef int Tk_ImageFileReadProc(
    <a href="../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>,
    Tcl_Channel <i>chan</i>,
    CONST char *<i>fileName</i>,
    Tcl_Obj *<i>format</i>,
    PhotoHandle <i>imageHandle</i>,
    int <i>destX</i>, int <i>destY</i>,
    int <i>width</i>, int <i>height</i>,
    int <i>srcX</i>, int <i>srcY</i>);
</pre>

<p>The <i>interp</i> argument is the interpreter in which the
command was invoked to read the image; it should be used for
reporting errors. The image data is in the file named
<i>fileName</i>, which is open for reading as <i>chan</i>. The
<i>format</i> argument contains the value given for the
<b>-format</b> option, or NULL if the option was not specified. The
image data in the file, or a subimage of it, is to be read into the
photo image identified by the handle <i>imageHandle</i>. The
subimage of the data in the file is of dimensions <i>width</i> x
<i>height</i> and has its top-left corner at coordinates
(<i>srcX</i>,<i>srcY</i>). It is to be stored in the photo image
with its top-left corner at coordinates (<i>destX</i>,<i>destY</i>)
using the <b><a href=
"../TkLib/FindPhoto.htm">Tk_PhotoPutBlock</a></b> procedure. The
return value is a standard Tcl return value.</p>

<h3><a name="M11">STRINGREADPROC</a></h3>

<p><i>formatPtr-&gt;stringReadProc</i> provides the address of a
procedure for Tk to call to read data from a string into a photo
image. <i>formatPtr-&gt;stringReadProc</i> must match the following
prototype:</p>

<pre>
typedef int Tk_ImageStringReadProc(
    <a href="../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>,
    Tcl_Obj *<i>data</i>,
    Tcl_Obj *<i>format</i>,
    PhotoHandle <i>imageHandle</i>,
    int <i>destX</i>, int <i>destY</i>,
    int <i>width</i>, int <i>height</i>,
    int <i>srcX</i>, int <i>srcY</i>);
</pre>

<p>The <i>interp</i> argument is the interpreter in which the
command was invoked to read the image; it should be used for
reporting errors. The <i>data</i> argument points to the image data
in object form. The <i>format</i> argument contains the value given
for the <b>-format</b> option, or NULL if the option was not
specified. The image data in the string, or a subimage of it, is to
be read into the photo image identified by the handle
<i>imageHandle</i>. The subimage of the data in the string is of
dimensions <i>width</i> x <i>height</i> and has its top-left corner
at coordinates (<i>srcX</i>,<i>srcY</i>). It is to be stored in the
photo image with its top-left corner at coordinates
(<i>destX</i>,<i>destY</i>) using the <b><a href=
"../TkLib/FindPhoto.htm">Tk_PhotoPutBlock</a></b> procedure. The
return value is a standard Tcl return value.</p>

<h3><a name="M12">FILEWRITEPROC</a></h3>

<p><i>formatPtr-&gt;fileWriteProc</i> provides the address of a
procedure for Tk to call to write data from a photo image to a
file. <i>formatPtr-&gt;fileWriteProc</i> must match the following
prototype:</p>

<pre>
typedef int Tk_ImageFileWriteProc(
    <a href="../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>,
    CONST char *<i>fileName</i>,
    Tcl_Obj *<i>format</i>,
    Tk_PhotoImageBlock *<i>blockPtr</i>);
</pre>

<p>The <i>interp</i> argument is the interpreter in which the
command was invoked to write the image; it should be used for
reporting errors. The image data to be written are in memory and
are described by the Tk_PhotoImageBlock structure pointed to by
<i>blockPtr</i>; see the manual page FindPhoto(3) for details. The
<i>fileName</i> argument points to the string giving the name of
the file in which to write the image data. The <i>format</i>
argument contains the value given for the <b>-format</b> option, or
NULL if the option was not specified. The format string can contain
extra characters after the name of the format. If appropriate, the
<i>formatPtr-&gt;fileWriteProc</i> procedure may interpret these
characters to specify further details about the image file. The
return value is a standard Tcl return value.</p>

<h3><a name="M13">STRINGWRITEPROC</a></h3>

<p><i>formatPtr-&gt;stringWriteProc</i> provides the address of a
procedure for Tk to call to translate image data from a photo image
into a string. <i>formatPtr-&gt;stringWriteProc</i> must match the
following prototype:</p>

<pre>
typedef int Tk_ImageStringWriteProc(
    <a href="../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>,
    Tcl_Obj *<i>format</i>,
    Tk_PhotoImageBlock *<i>blockPtr</i>);
</pre>

<p>The <i>interp</i> argument is the interpreter in which the
command was invoked to convert the image; it should be used for
reporting errors. The image data to be converted are in memory and
are described by the Tk_PhotoImageBlock structure pointed to by
<i>blockPtr</i>; see the manual page FindPhoto(3) for details. The
data for the string should be put in the interpreter <i>interp</i>
result. The <i>format</i> argument contains the value given for the
<b>-format</b> option, or NULL if the option was not specified. The
format string can contain extra characters after the name of the
format. If appropriate, the <i>formatPtr-&gt;stringWriteProc</i>
procedure may interpret these characters to specify further details
about the image file. The return value is a standard Tcl return
value.</p>

<h3><a name="M14">SEE ALSO</a></h3>

<p><b><a href="../TkLib/FindPhoto.htm">Tk_FindPhoto</a></b>, <b><a
href="../TkLib/FindPhoto.htm">Tk_PhotoPutBlock</a></b></p>

<h3><a name="M15">KEYWORDS</a></h3>

<p><a href="../Keywords/P.htm#photo image">photo image</a>, <a
href="../Keywords/I.htm#image file">image file</a></p>

<hr>
<pre>
<a href=
"../copyright.htm">Copyright</a> &copy; 1994 The Australian National University
<a href=
"../copyright.htm">Copyright</a> &copy; 1994-1997 Sun Microsystems, Inc.
<a href=
"../copyright.htm">Copyright</a> &copy; 1995-1997 Roger E. Critchlow Jr.
</pre>
</body>
</html>

